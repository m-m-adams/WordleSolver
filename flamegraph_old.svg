<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="853.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="853.00"> </text><svg id="frames" x="10" width="1180" total_samples="394"><g><title>[unknown] (1 samples, 0.25%)</title><rect x="0.0000%" y="773" width="0.2538%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="0.0000%" y="757" width="0.2538%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="0.0000%" y="741" width="0.2538%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="0.0000%" y="725" width="0.2538%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="0.0000%" y="709" width="0.2538%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="0.0000%" y="693" width="0.2538%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="0.0000%" y="677" width="0.2538%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="0.0000%" y="661" width="0.2538%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="0.0000%" y="645" width="0.2538%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.51%)</title><rect x="0.5076%" y="341" width="0.5076%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="2"/><text x="0.7576%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.25%)</title><rect x="1.0152%" y="341" width="0.2538%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="1"/><text x="1.2652%" y="351.50"></text></g><g><title>__GI___libc_malloc (12 samples, 3.05%)</title><rect x="2.0305%" y="149" width="3.0457%" height="15" fill="rgb(240,193,28)" fg:x="8" fg:w="12"/><text x="2.2805%" y="159.50">__G..</text></g><g><title>_int_malloc (2 samples, 0.51%)</title><rect x="4.5685%" y="133" width="0.5076%" height="15" fill="rgb(216,20,37)" fg:x="18" fg:w="2"/><text x="4.8185%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (15 samples, 3.81%)</title><rect x="2.0305%" y="245" width="3.8071%" height="15" fill="rgb(206,188,39)" fg:x="8" fg:w="15"/><text x="2.2805%" y="255.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15 samples, 3.81%)</title><rect x="2.0305%" y="229" width="3.8071%" height="15" fill="rgb(217,207,13)" fg:x="8" fg:w="15"/><text x="2.2805%" y="239.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (15 samples, 3.81%)</title><rect x="2.0305%" y="213" width="3.8071%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="15"/><text x="2.2805%" y="223.50">allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 3.81%)</title><rect x="2.0305%" y="197" width="3.8071%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="15"/><text x="2.2805%" y="207.50">&lt;all..</text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 3.81%)</title><rect x="2.0305%" y="181" width="3.8071%" height="15" fill="rgb(210,31,41)" fg:x="8" fg:w="15"/><text x="2.2805%" y="191.50">allo..</text></g><g><title>alloc::alloc::alloc (15 samples, 3.81%)</title><rect x="2.0305%" y="165" width="3.8071%" height="15" fill="rgb(221,200,47)" fg:x="8" fg:w="15"/><text x="2.2805%" y="175.50">allo..</text></g><g><title>__rdl_alloc (3 samples, 0.76%)</title><rect x="5.0761%" y="149" width="0.7614%" height="15" fill="rgb(226,26,5)" fg:x="20" fg:w="3"/><text x="5.3261%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.51%)</title><rect x="5.3299%" y="133" width="0.5076%" height="15" fill="rgb(249,33,26)" fg:x="21" fg:w="2"/><text x="5.5799%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (24 samples, 6.09%)</title><rect x="1.2690%" y="325" width="6.0914%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="24"/><text x="1.5190%" y="335.50">&lt;alloc::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (21 samples, 5.33%)</title><rect x="2.0305%" y="309" width="5.3299%" height="15" fill="rgb(221,5,38)" fg:x="8" fg:w="21"/><text x="2.2805%" y="319.50">&lt;alloc:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (21 samples, 5.33%)</title><rect x="2.0305%" y="293" width="5.3299%" height="15" fill="rgb(247,18,42)" fg:x="8" fg:w="21"/><text x="2.2805%" y="303.50">alloc::..</text></g><g><title>alloc::slice::hack::to_vec (21 samples, 5.33%)</title><rect x="2.0305%" y="277" width="5.3299%" height="15" fill="rgb(241,131,45)" fg:x="8" fg:w="21"/><text x="2.2805%" y="287.50">alloc::..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (21 samples, 5.33%)</title><rect x="2.0305%" y="261" width="5.3299%" height="15" fill="rgb(249,31,29)" fg:x="8" fg:w="21"/><text x="2.2805%" y="271.50">&lt;T as a..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (6 samples, 1.52%)</title><rect x="5.8376%" y="245" width="1.5228%" height="15" fill="rgb(225,111,53)" fg:x="23" fg:w="6"/><text x="6.0876%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 1.52%)</title><rect x="5.8376%" y="229" width="1.5228%" height="15" fill="rgb(238,160,17)" fg:x="23" fg:w="6"/><text x="6.0876%" y="239.50"></text></g><g><title>__memcpy_avx_unaligned_erms (5 samples, 1.27%)</title><rect x="6.0914%" y="213" width="1.2690%" height="15" fill="rgb(214,148,48)" fg:x="24" fg:w="5"/><text x="6.3414%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (3 samples, 0.76%)</title><rect x="9.1371%" y="277" width="0.7614%" height="15" fill="rgb(232,36,49)" fg:x="36" fg:w="3"/><text x="9.3871%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.76%)</title><rect x="9.1371%" y="261" width="0.7614%" height="15" fill="rgb(209,103,24)" fg:x="36" fg:w="3"/><text x="9.3871%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.51%)</title><rect x="9.3909%" y="245" width="0.5076%" height="15" fill="rgb(229,88,8)" fg:x="37" fg:w="2"/><text x="9.6409%" y="255.50"></text></g><g><title>&lt;&amp;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.25%)</title><rect x="11.9289%" y="261" width="0.2538%" height="15" fill="rgb(213,181,19)" fg:x="47" fg:w="1"/><text x="12.1789%" y="271.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (1 samples, 0.25%)</title><rect x="11.9289%" y="245" width="0.2538%" height="15" fill="rgb(254,191,54)" fg:x="47" fg:w="1"/><text x="12.1789%" y="255.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (1 samples, 0.25%)</title><rect x="11.9289%" y="229" width="0.2538%" height="15" fill="rgb(241,83,37)" fg:x="47" fg:w="1"/><text x="12.1789%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (1 samples, 0.25%)</title><rect x="11.9289%" y="213" width="0.2538%" height="15" fill="rgb(233,36,39)" fg:x="47" fg:w="1"/><text x="12.1789%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (1 samples, 0.25%)</title><rect x="11.9289%" y="197" width="0.2538%" height="15" fill="rgb(226,3,54)" fg:x="47" fg:w="1"/><text x="12.1789%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (1 samples, 0.25%)</title><rect x="11.9289%" y="181" width="0.2538%" height="15" fill="rgb(245,192,40)" fg:x="47" fg:w="1"/><text x="12.1789%" y="191.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (1 samples, 0.25%)</title><rect x="11.9289%" y="165" width="0.2538%" height="15" fill="rgb(238,167,29)" fg:x="47" fg:w="1"/><text x="12.1789%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (1 samples, 0.25%)</title><rect x="11.9289%" y="149" width="0.2538%" height="15" fill="rgb(232,182,51)" fg:x="47" fg:w="1"/><text x="12.1789%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.25%)</title><rect x="11.9289%" y="133" width="0.2538%" height="15" fill="rgb(231,60,39)" fg:x="47" fg:w="1"/><text x="12.1789%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.25%)</title><rect x="11.9289%" y="117" width="0.2538%" height="15" fill="rgb(208,69,12)" fg:x="47" fg:w="1"/><text x="12.1789%" y="127.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.25%)</title><rect x="12.1827%" y="229" width="0.2538%" height="15" fill="rgb(235,93,37)" fg:x="48" fg:w="1"/><text x="12.4327%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.76%)</title><rect x="12.1827%" y="261" width="0.7614%" height="15" fill="rgb(213,116,39)" fg:x="48" fg:w="3"/><text x="12.4327%" y="271.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.76%)</title><rect x="12.1827%" y="245" width="0.7614%" height="15" fill="rgb(222,207,29)" fg:x="48" fg:w="3"/><text x="12.4327%" y="255.50"></text></g><g><title>core::str::validations::next_code_point (2 samples, 0.51%)</title><rect x="12.4365%" y="229" width="0.5076%" height="15" fill="rgb(206,96,30)" fg:x="49" fg:w="2"/><text x="12.6865%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.25%)</title><rect x="12.6904%" y="213" width="0.2538%" height="15" fill="rgb(218,138,4)" fg:x="50" fg:w="1"/><text x="12.9404%" y="223.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.51%)</title><rect x="12.9442%" y="261" width="0.5076%" height="15" fill="rgb(250,191,14)" fg:x="51" fg:w="2"/><text x="13.1942%" y="271.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.51%)</title><rect x="12.9442%" y="245" width="0.5076%" height="15" fill="rgb(239,60,40)" fg:x="51" fg:w="2"/><text x="13.1942%" y="255.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.51%)</title><rect x="12.9442%" y="229" width="0.5076%" height="15" fill="rgb(206,27,48)" fg:x="51" fg:w="2"/><text x="13.1942%" y="239.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.51%)</title><rect x="12.9442%" y="213" width="0.5076%" height="15" fill="rgb(225,35,8)" fg:x="51" fg:w="2"/><text x="13.1942%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.25%)</title><rect x="13.1980%" y="197" width="0.2538%" height="15" fill="rgb(250,213,24)" fg:x="52" fg:w="1"/><text x="13.4480%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.25%)</title><rect x="13.1980%" y="181" width="0.2538%" height="15" fill="rgb(247,123,22)" fg:x="52" fg:w="1"/><text x="13.4480%" y="191.50"></text></g><g><title>core::str::&lt;impl str&gt;::contains (5 samples, 1.27%)</title><rect x="13.4518%" y="261" width="1.2690%" height="15" fill="rgb(231,138,38)" fg:x="53" fg:w="5"/><text x="13.7018%" y="271.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (5 samples, 1.27%)</title><rect x="13.4518%" y="245" width="1.2690%" height="15" fill="rgb(231,145,46)" fg:x="53" fg:w="5"/><text x="13.7018%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (3 samples, 0.76%)</title><rect x="13.9594%" y="229" width="0.7614%" height="15" fill="rgb(251,118,11)" fg:x="55" fg:w="3"/><text x="14.2094%" y="239.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceContains&gt;::slice_contains (3 samples, 0.76%)</title><rect x="13.9594%" y="213" width="0.7614%" height="15" fill="rgb(217,147,25)" fg:x="55" fg:w="3"/><text x="14.2094%" y="223.50"></text></g><g><title>core::slice::memchr::memchr (3 samples, 0.76%)</title><rect x="13.9594%" y="197" width="0.7614%" height="15" fill="rgb(247,81,37)" fg:x="55" fg:w="3"/><text x="14.2094%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (3 samples, 0.76%)</title><rect x="13.9594%" y="181" width="0.7614%" height="15" fill="rgb(209,12,38)" fg:x="55" fg:w="3"/><text x="14.2094%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.25%)</title><rect x="14.4670%" y="165" width="0.2538%" height="15" fill="rgb(227,1,9)" fg:x="57" fg:w="1"/><text x="14.7170%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (8 samples, 2.03%)</title><rect x="22.8426%" y="117" width="2.0305%" height="15" fill="rgb(248,47,43)" fg:x="90" fg:w="8"/><text x="23.0926%" y="127.50">c..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (17 samples, 4.31%)</title><rect x="22.0812%" y="133" width="4.3147%" height="15" fill="rgb(221,10,30)" fg:x="87" fg:w="17"/><text x="22.3312%" y="143.50">&lt;core..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6 samples, 1.52%)</title><rect x="24.8731%" y="117" width="1.5228%" height="15" fill="rgb(210,229,1)" fg:x="98" fg:w="6"/><text x="25.1231%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (32 samples, 8.12%)</title><rect x="29.1878%" y="117" width="8.1218%" height="15" fill="rgb(222,148,37)" fg:x="115" fg:w="32"/><text x="29.4378%" y="127.50">core::num::..</text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="37.0558%" y="101" width="0.2538%" height="15" fill="rgb(234,67,33)" fg:x="146" fg:w="1"/><text x="37.3058%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="37.0558%" y="85" width="0.2538%" height="15" fill="rgb(247,98,35)" fg:x="146" fg:w="1"/><text x="37.3058%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="37.0558%" y="69" width="0.2538%" height="15" fill="rgb(247,138,52)" fg:x="146" fg:w="1"/><text x="37.3058%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="37.0558%" y="53" width="0.2538%" height="15" fill="rgb(213,79,30)" fg:x="146" fg:w="1"/><text x="37.3058%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="37.0558%" y="37" width="0.2538%" height="15" fill="rgb(246,177,23)" fg:x="146" fg:w="1"/><text x="37.3058%" y="47.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (94 samples, 23.86%)</title><rect x="17.0051%" y="181" width="23.8579%" height="15" fill="rgb(230,62,27)" fg:x="67" fg:w="94"/><text x="17.2551%" y="191.50">&lt;std::collections::hash::map::DefaultH..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (94 samples, 23.86%)</title><rect x="17.0051%" y="165" width="23.8579%" height="15" fill="rgb(216,154,8)" fg:x="67" fg:w="94"/><text x="17.2551%" y="175.50">&lt;core::hash::sip::SipHasher13 as core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (94 samples, 23.86%)</title><rect x="17.0051%" y="149" width="23.8579%" height="15" fill="rgb(244,35,45)" fg:x="67" fg:w="94"/><text x="17.2551%" y="159.50">&lt;core::hash::sip::Hasher&lt;S&gt; as core::h..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (57 samples, 14.47%)</title><rect x="26.3959%" y="133" width="14.4670%" height="15" fill="rgb(251,115,12)" fg:x="104" fg:w="57"/><text x="26.6459%" y="143.50">&lt;core::hash::sip::Sip1..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (14 samples, 3.55%)</title><rect x="37.3096%" y="117" width="3.5533%" height="15" fill="rgb(240,54,50)" fg:x="147" fg:w="14"/><text x="37.5596%" y="127.50">core..</text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (13 samples, 3.30%)</title><rect x="40.8629%" y="181" width="3.2995%" height="15" fill="rgb(233,84,52)" fg:x="161" fg:w="13"/><text x="41.1129%" y="191.50">&lt;st..</text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (9 samples, 2.28%)</title><rect x="41.8782%" y="165" width="2.2843%" height="15" fill="rgb(207,117,47)" fg:x="165" fg:w="9"/><text x="42.1282%" y="175.50">c..</text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (8 samples, 2.03%)</title><rect x="42.1320%" y="149" width="2.0305%" height="15" fill="rgb(249,43,39)" fg:x="166" fg:w="8"/><text x="42.3820%" y="159.50">c..</text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (8 samples, 2.03%)</title><rect x="42.1320%" y="133" width="2.0305%" height="15" fill="rgb(209,38,44)" fg:x="166" fg:w="8"/><text x="42.3820%" y="143.50">c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 2.03%)</title><rect x="46.4467%" y="117" width="2.0305%" height="15" fill="rgb(236,212,23)" fg:x="183" fg:w="8"/><text x="46.6967%" y="127.50">&lt;..</text></g><g><title>core::hash::sip::u8to64_le (5 samples, 1.27%)</title><rect x="47.2081%" y="101" width="1.2690%" height="15" fill="rgb(242,79,21)" fg:x="186" fg:w="5"/><text x="47.4581%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.25%)</title><rect x="48.2234%" y="85" width="0.2538%" height="15" fill="rgb(211,96,35)" fg:x="190" fg:w="1"/><text x="48.4734%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (127 samples, 32.23%)</title><rect x="16.7513%" y="197" width="32.2335%" height="15" fill="rgb(253,215,40)" fg:x="66" fg:w="127"/><text x="17.0013%" y="207.50">hashbrown::map::make_hash</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for char&gt;::hash (19 samples, 4.82%)</title><rect x="44.1624%" y="181" width="4.8223%" height="15" fill="rgb(211,81,21)" fg:x="174" fg:w="19"/><text x="44.4124%" y="191.50">core::..</text></g><g><title>core::hash::Hasher::write_u32 (10 samples, 2.54%)</title><rect x="46.4467%" y="165" width="2.5381%" height="15" fill="rgb(208,190,38)" fg:x="183" fg:w="10"/><text x="46.6967%" y="175.50">co..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 2.54%)</title><rect x="46.4467%" y="149" width="2.5381%" height="15" fill="rgb(235,213,38)" fg:x="183" fg:w="10"/><text x="46.6967%" y="159.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (10 samples, 2.54%)</title><rect x="46.4467%" y="133" width="2.5381%" height="15" fill="rgb(237,122,38)" fg:x="183" fg:w="10"/><text x="46.6967%" y="143.50">&lt;c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for char&gt;::hash (2 samples, 0.51%)</title><rect x="48.4772%" y="117" width="0.5076%" height="15" fill="rgb(244,218,35)" fg:x="191" fg:w="2"/><text x="48.7272%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2 samples, 0.51%)</title><rect x="48.9848%" y="181" width="0.5076%" height="15" fill="rgb(240,68,47)" fg:x="193" fg:w="2"/><text x="49.2348%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 8.12%)</title><rect x="52.5381%" y="149" width="8.1218%" height="15" fill="rgb(210,16,53)" fg:x="207" fg:w="32"/><text x="52.7881%" y="159.50">&lt;hashbrown:..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 5.84%)</title><rect x="54.8223%" y="133" width="5.8376%" height="15" fill="rgb(235,124,12)" fg:x="216" fg:w="23"/><text x="55.0723%" y="143.50">&lt;hashbr..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.51%)</title><rect x="60.1523%" y="117" width="0.5076%" height="15" fill="rgb(224,169,11)" fg:x="237" fg:w="2"/><text x="60.4023%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 8.38%)</title><rect x="52.5381%" y="165" width="8.3756%" height="15" fill="rgb(250,166,2)" fg:x="207" fg:w="33"/><text x="52.7881%" y="175.50">&lt;hashbrown::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1 samples, 0.25%)</title><rect x="60.6599%" y="149" width="0.2538%" height="15" fill="rgb(242,216,29)" fg:x="239" fg:w="1"/><text x="60.9099%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.25%)</title><rect x="60.9137%" y="165" width="0.2538%" height="15" fill="rgb(230,116,27)" fg:x="240" fg:w="1"/><text x="61.1637%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.25%)</title><rect x="60.9137%" y="149" width="0.2538%" height="15" fill="rgb(228,99,48)" fg:x="240" fg:w="1"/><text x="61.1637%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.25%)</title><rect x="60.9137%" y="133" width="0.2538%" height="15" fill="rgb(253,11,6)" fg:x="240" fg:w="1"/><text x="61.1637%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.25%)</title><rect x="60.9137%" y="117" width="0.2538%" height="15" fill="rgb(247,143,39)" fg:x="240" fg:w="1"/><text x="61.1637%" y="127.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (6 samples, 1.52%)</title><rect x="61.1675%" y="117" width="1.5228%" height="15" fill="rgb(236,97,10)" fg:x="241" fg:w="6"/><text x="61.4175%" y="127.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.25%)</title><rect x="62.6904%" y="117" width="0.2538%" height="15" fill="rgb(233,208,19)" fg:x="247" fg:w="1"/><text x="62.9404%" y="127.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (250 samples, 63.45%)</title><rect x="7.6142%" y="309" width="63.4518%" height="15" fill="rgb(216,164,2)" fg:x="30" fg:w="250"/><text x="7.8642%" y="319.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>wordle::Wordle::guess::{{closure}} (245 samples, 62.18%)</title><rect x="8.8832%" y="293" width="62.1827%" height="15" fill="rgb(220,129,5)" fg:x="35" fg:w="245"/><text x="9.1332%" y="303.50">wordle::Wordle::guess::{{closure}}</text></g><g><title>wordle::Wordle::check_word (241 samples, 61.17%)</title><rect x="9.8985%" y="277" width="61.1675%" height="15" fill="rgb(242,17,10)" fg:x="39" fg:w="241"/><text x="10.1485%" y="287.50">wordle::Wordle::check_word</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (222 samples, 56.35%)</title><rect x="14.7208%" y="261" width="56.3452%" height="15" fill="rgb(242,107,0)" fg:x="58" fg:w="222"/><text x="14.9708%" y="271.50">std::collections::hash::set::HashSet&lt;T,S&gt;::contains</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (222 samples, 56.35%)</title><rect x="14.7208%" y="245" width="56.3452%" height="15" fill="rgb(251,28,31)" fg:x="58" fg:w="222"/><text x="14.9708%" y="255.50">hashbrown::set::HashSet&lt;T,S,A&gt;::contains</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (222 samples, 56.35%)</title><rect x="14.7208%" y="229" width="56.3452%" height="15" fill="rgb(233,223,10)" fg:x="58" fg:w="222"/><text x="14.9708%" y="239.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (214 samples, 54.31%)</title><rect x="16.7513%" y="213" width="54.3147%" height="15" fill="rgb(215,21,27)" fg:x="66" fg:w="214"/><text x="17.0013%" y="223.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (87 samples, 22.08%)</title><rect x="48.9848%" y="197" width="22.0812%" height="15" fill="rgb(232,23,21)" fg:x="193" fg:w="87"/><text x="49.2348%" y="207.50">hashbrown::raw::RawTable&lt;T,A&gt;::get</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (85 samples, 21.57%)</title><rect x="49.4924%" y="181" width="21.5736%" height="15" fill="rgb(244,5,23)" fg:x="195" fg:w="85"/><text x="49.7424%" y="191.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (39 samples, 9.90%)</title><rect x="61.1675%" y="165" width="9.8985%" height="15" fill="rgb(226,81,46)" fg:x="241" fg:w="39"/><text x="61.4175%" y="175.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (39 samples, 9.90%)</title><rect x="61.1675%" y="149" width="9.8985%" height="15" fill="rgb(247,70,30)" fg:x="241" fg:w="39"/><text x="61.4175%" y="159.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (39 samples, 9.90%)</title><rect x="61.1675%" y="133" width="9.8985%" height="15" fill="rgb(212,68,19)" fg:x="241" fg:w="39"/><text x="61.4175%" y="143.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (32 samples, 8.12%)</title><rect x="62.9442%" y="117" width="8.1218%" height="15" fill="rgb(240,187,13)" fg:x="248" fg:w="32"/><text x="63.1942%" y="127.50">hashbrown::..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (32 samples, 8.12%)</title><rect x="62.9442%" y="101" width="8.1218%" height="15" fill="rgb(223,113,26)" fg:x="248" fg:w="32"/><text x="63.1942%" y="111.50">core::core_..</text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (32 samples, 8.12%)</title><rect x="62.9442%" y="85" width="8.1218%" height="15" fill="rgb(206,192,2)" fg:x="248" fg:w="32"/><text x="63.1942%" y="95.50">core::core_..</text></g><g><title>core::core_arch::simd::i8x16::new (32 samples, 8.12%)</title><rect x="62.9442%" y="69" width="8.1218%" height="15" fill="rgb(241,108,4)" fg:x="248" fg:w="32"/><text x="63.1942%" y="79.50">core::core_..</text></g><g><title>__free (22 samples, 5.58%)</title><rect x="71.3198%" y="213" width="5.5838%" height="15" fill="rgb(247,173,49)" fg:x="281" fg:w="22"/><text x="71.5698%" y="223.50">__free</text></g><g><title>_int_free (15 samples, 3.81%)</title><rect x="73.0964%" y="197" width="3.8071%" height="15" fill="rgb(224,114,35)" fg:x="288" fg:w="15"/><text x="73.3464%" y="207.50">_int..</text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (302 samples, 76.65%)</title><rect x="0.5076%" y="373" width="76.6497%" height="15" fill="rgb(245,159,27)" fg:x="2" fg:w="302"/><text x="0.7576%" y="383.50">&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (302 samples, 76.65%)</title><rect x="0.5076%" y="357" width="76.6497%" height="15" fill="rgb(245,172,44)" fg:x="2" fg:w="302"/><text x="0.7576%" y="367.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>core::iter::adapters::cloned::clone_try_fold::{{closure}} (299 samples, 75.89%)</title><rect x="1.2690%" y="341" width="75.8883%" height="15" fill="rgb(236,23,11)" fg:x="5" fg:w="299"/><text x="1.5190%" y="351.50">core::iter::adapters::cloned::clone_try_fold::{{closure}}</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (275 samples, 69.80%)</title><rect x="7.3604%" y="325" width="69.7970%" height="15" fill="rgb(205,117,38)" fg:x="29" fg:w="275"/><text x="7.6104%" y="335.50">core::iter::traits::iterator::Iterator::find::check::{{closure}}</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (24 samples, 6.09%)</title><rect x="71.0660%" y="309" width="6.0914%" height="15" fill="rgb(237,72,25)" fg:x="280" fg:w="24"/><text x="71.3160%" y="319.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (24 samples, 6.09%)</title><rect x="71.0660%" y="293" width="6.0914%" height="15" fill="rgb(244,70,9)" fg:x="280" fg:w="24"/><text x="71.3160%" y="303.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (24 samples, 6.09%)</title><rect x="71.0660%" y="277" width="6.0914%" height="15" fill="rgb(217,125,39)" fg:x="280" fg:w="24"/><text x="71.3160%" y="287.50">core::pt..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 6.09%)</title><rect x="71.0660%" y="261" width="6.0914%" height="15" fill="rgb(235,36,10)" fg:x="280" fg:w="24"/><text x="71.3160%" y="271.50">&lt;alloc::..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24 samples, 6.09%)</title><rect x="71.0660%" y="245" width="6.0914%" height="15" fill="rgb(251,123,47)" fg:x="280" fg:w="24"/><text x="71.3160%" y="255.50">&lt;alloc::..</text></g><g><title>alloc::alloc::dealloc (24 samples, 6.09%)</title><rect x="71.0660%" y="229" width="6.0914%" height="15" fill="rgb(221,13,13)" fg:x="280" fg:w="24"/><text x="71.3160%" y="239.50">alloc::a..</text></g><g><title>__rust_dealloc (1 samples, 0.25%)</title><rect x="76.9036%" y="213" width="0.2538%" height="15" fill="rgb(238,131,9)" fg:x="303" fg:w="1"/><text x="77.1536%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (305 samples, 77.41%)</title><rect x="0.5076%" y="405" width="77.4112%" height="15" fill="rgb(211,50,8)" fg:x="2" fg:w="305"/><text x="0.7576%" y="415.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::iter::traits::iterator::Iterator::find (305 samples, 77.41%)</title><rect x="0.5076%" y="389" width="77.4112%" height="15" fill="rgb(245,182,24)" fg:x="2" fg:w="305"/><text x="0.7576%" y="399.50">core::iter::traits::iterator::Iterator::find</text></g><g><title>core::ops::control_flow::ControlFlow&lt;B,C&gt;::break_value (3 samples, 0.76%)</title><rect x="77.1574%" y="373" width="0.7614%" height="15" fill="rgb(242,14,37)" fg:x="304" fg:w="3"/><text x="77.4074%" y="383.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.25%)</title><rect x="77.9188%" y="341" width="0.2538%" height="15" fill="rgb(246,228,12)" fg:x="307" fg:w="1"/><text x="78.1688%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.76%)</title><rect x="77.9188%" y="405" width="0.7614%" height="15" fill="rgb(213,55,15)" fg:x="307" fg:w="3"/><text x="78.1688%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.76%)</title><rect x="77.9188%" y="389" width="0.7614%" height="15" fill="rgb(209,9,3)" fg:x="307" fg:w="3"/><text x="78.1688%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.76%)</title><rect x="77.9188%" y="373" width="0.7614%" height="15" fill="rgb(230,59,30)" fg:x="307" fg:w="3"/><text x="78.1688%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.76%)</title><rect x="77.9188%" y="357" width="0.7614%" height="15" fill="rgb(209,121,21)" fg:x="307" fg:w="3"/><text x="78.1688%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.51%)</title><rect x="78.1726%" y="341" width="0.5076%" height="15" fill="rgb(220,109,13)" fg:x="308" fg:w="2"/><text x="78.4226%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.51%)</title><rect x="78.1726%" y="325" width="0.5076%" height="15" fill="rgb(232,18,1)" fg:x="308" fg:w="2"/><text x="78.4226%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.51%)</title><rect x="78.1726%" y="309" width="0.5076%" height="15" fill="rgb(215,41,42)" fg:x="308" fg:w="2"/><text x="78.4226%" y="319.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.51%)</title><rect x="78.1726%" y="293" width="0.5076%" height="15" fill="rgb(224,123,36)" fg:x="308" fg:w="2"/><text x="78.4226%" y="303.50"></text></g><g><title>__realloc (2 samples, 0.51%)</title><rect x="78.1726%" y="277" width="0.5076%" height="15" fill="rgb(240,125,3)" fg:x="308" fg:w="2"/><text x="78.4226%" y="287.50"></text></g><g><title>_int_realloc (1 samples, 0.25%)</title><rect x="78.4264%" y="261" width="0.2538%" height="15" fill="rgb(205,98,50)" fg:x="309" fg:w="1"/><text x="78.6764%" y="271.50"></text></g><g><title>_int_malloc (1 samples, 0.25%)</title><rect x="78.4264%" y="245" width="0.2538%" height="15" fill="rgb(205,185,37)" fg:x="309" fg:w="1"/><text x="78.6764%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (318 samples, 80.71%)</title><rect x="0.2538%" y="437" width="80.7107%" height="15" fill="rgb(238,207,15)" fg:x="1" fg:w="318"/><text x="0.5038%" y="447.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (318 samples, 80.71%)</title><rect x="0.2538%" y="421" width="80.7107%" height="15" fill="rgb(213,199,42)" fg:x="1" fg:w="318"/><text x="0.5038%" y="431.50">alloc::vec::Vec&lt;T,A&gt;::extend_desugared</text></g><g><title>core::ptr::write (9 samples, 2.28%)</title><rect x="78.6802%" y="405" width="2.2843%" height="15" fill="rgb(235,201,11)" fg:x="310" fg:w="9"/><text x="78.9302%" y="415.50">c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.25%)</title><rect x="80.9645%" y="373" width="0.2538%" height="15" fill="rgb(207,46,11)" fg:x="319" fg:w="1"/><text x="81.2145%" y="383.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.51%)</title><rect x="81.9797%" y="181" width="0.5076%" height="15" fill="rgb(241,35,35)" fg:x="323" fg:w="2"/><text x="82.2297%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.76%)</title><rect x="81.9797%" y="277" width="0.7614%" height="15" fill="rgb(243,32,47)" fg:x="323" fg:w="3"/><text x="82.2297%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.76%)</title><rect x="81.9797%" y="261" width="0.7614%" height="15" fill="rgb(247,202,23)" fg:x="323" fg:w="3"/><text x="82.2297%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.76%)</title><rect x="81.9797%" y="245" width="0.7614%" height="15" fill="rgb(219,102,11)" fg:x="323" fg:w="3"/><text x="82.2297%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.76%)</title><rect x="81.9797%" y="229" width="0.7614%" height="15" fill="rgb(243,110,44)" fg:x="323" fg:w="3"/><text x="82.2297%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.76%)</title><rect x="81.9797%" y="213" width="0.7614%" height="15" fill="rgb(222,74,54)" fg:x="323" fg:w="3"/><text x="82.2297%" y="223.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.76%)</title><rect x="81.9797%" y="197" width="0.7614%" height="15" fill="rgb(216,99,12)" fg:x="323" fg:w="3"/><text x="82.2297%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.25%)</title><rect x="82.4873%" y="181" width="0.2538%" height="15" fill="rgb(226,22,26)" fg:x="325" fg:w="1"/><text x="82.7373%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7 samples, 1.78%)</title><rect x="81.2183%" y="357" width="1.7766%" height="15" fill="rgb(217,163,10)" fg:x="320" fg:w="7"/><text x="81.4683%" y="367.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 1.02%)</title><rect x="81.9797%" y="341" width="1.0152%" height="15" fill="rgb(213,25,53)" fg:x="323" fg:w="4"/><text x="82.2297%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 1.02%)</title><rect x="81.9797%" y="325" width="1.0152%" height="15" fill="rgb(252,105,26)" fg:x="323" fg:w="4"/><text x="82.2297%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 1.02%)</title><rect x="81.9797%" y="309" width="1.0152%" height="15" fill="rgb(220,39,43)" fg:x="323" fg:w="4"/><text x="82.2297%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 1.02%)</title><rect x="81.9797%" y="293" width="1.0152%" height="15" fill="rgb(229,68,48)" fg:x="323" fg:w="4"/><text x="82.2297%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.25%)</title><rect x="82.7411%" y="277" width="0.2538%" height="15" fill="rgb(252,8,32)" fg:x="326" fg:w="1"/><text x="82.9911%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.25%)</title><rect x="82.7411%" y="261" width="0.2538%" height="15" fill="rgb(223,20,43)" fg:x="326" fg:w="1"/><text x="82.9911%" y="271.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.25%)</title><rect x="82.7411%" y="245" width="0.2538%" height="15" fill="rgb(229,81,49)" fg:x="326" fg:w="1"/><text x="82.9911%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.25%)</title><rect x="83.5025%" y="293" width="0.2538%" height="15" fill="rgb(236,28,36)" fg:x="329" fg:w="1"/><text x="83.7525%" y="303.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.25%)</title><rect x="83.5025%" y="277" width="0.2538%" height="15" fill="rgb(249,185,26)" fg:x="329" fg:w="1"/><text x="83.7525%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.25%)</title><rect x="83.5025%" y="261" width="0.2538%" height="15" fill="rgb(249,174,33)" fg:x="329" fg:w="1"/><text x="83.7525%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::contains (1 samples, 0.25%)</title><rect x="83.7563%" y="293" width="0.2538%" height="15" fill="rgb(233,201,37)" fg:x="330" fg:w="1"/><text x="84.0063%" y="303.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (1 samples, 0.25%)</title><rect x="83.7563%" y="277" width="0.2538%" height="15" fill="rgb(221,78,26)" fg:x="330" fg:w="1"/><text x="84.0063%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.76%)</title><rect x="84.5178%" y="149" width="0.7614%" height="15" fill="rgb(250,127,30)" fg:x="333" fg:w="3"/><text x="84.7678%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 1.27%)</title><rect x="84.5178%" y="165" width="1.2690%" height="15" fill="rgb(230,49,44)" fg:x="333" fg:w="5"/><text x="84.7678%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.51%)</title><rect x="85.2792%" y="149" width="0.5076%" height="15" fill="rgb(229,67,23)" fg:x="336" fg:w="2"/><text x="85.5292%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 1.27%)</title><rect x="86.2944%" y="149" width="1.2690%" height="15" fill="rgb(249,83,47)" fg:x="340" fg:w="5"/><text x="86.5444%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (18 samples, 4.57%)</title><rect x="84.0102%" y="213" width="4.5685%" height="15" fill="rgb(215,43,3)" fg:x="331" fg:w="18"/><text x="84.2602%" y="223.50">&lt;std:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (18 samples, 4.57%)</title><rect x="84.0102%" y="197" width="4.5685%" height="15" fill="rgb(238,154,13)" fg:x="331" fg:w="18"/><text x="84.2602%" y="207.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (18 samples, 4.57%)</title><rect x="84.0102%" y="181" width="4.5685%" height="15" fill="rgb(219,56,2)" fg:x="331" fg:w="18"/><text x="84.2602%" y="191.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (11 samples, 2.79%)</title><rect x="85.7868%" y="165" width="2.7919%" height="15" fill="rgb(233,0,4)" fg:x="338" fg:w="11"/><text x="86.0368%" y="175.50">&lt;c..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 1.02%)</title><rect x="87.5635%" y="149" width="1.0152%" height="15" fill="rgb(235,30,7)" fg:x="345" fg:w="4"/><text x="87.8135%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (23 samples, 5.84%)</title><rect x="84.0102%" y="229" width="5.8376%" height="15" fill="rgb(250,79,13)" fg:x="331" fg:w="23"/><text x="84.2602%" y="239.50">hashbro..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for char&gt;::hash (5 samples, 1.27%)</title><rect x="88.5787%" y="213" width="1.2690%" height="15" fill="rgb(211,146,34)" fg:x="349" fg:w="5"/><text x="88.8287%" y="223.50"></text></g><g><title>core::hash::Hasher::write_u32 (5 samples, 1.27%)</title><rect x="88.5787%" y="197" width="1.2690%" height="15" fill="rgb(228,22,38)" fg:x="349" fg:w="5"/><text x="88.8287%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 1.27%)</title><rect x="88.5787%" y="181" width="1.2690%" height="15" fill="rgb(235,168,5)" fg:x="349" fg:w="5"/><text x="88.8287%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 1.27%)</title><rect x="88.5787%" y="165" width="1.2690%" height="15" fill="rgb(221,155,16)" fg:x="349" fg:w="5"/><text x="88.8287%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 1.27%)</title><rect x="88.5787%" y="149" width="1.2690%" height="15" fill="rgb(215,215,53)" fg:x="349" fg:w="5"/><text x="88.8287%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.25%)</title><rect x="89.5939%" y="133" width="0.2538%" height="15" fill="rgb(223,4,10)" fg:x="353" fg:w="1"/><text x="89.8439%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1 samples, 0.25%)</title><rect x="89.8477%" y="213" width="0.2538%" height="15" fill="rgb(234,103,6)" fg:x="354" fg:w="1"/><text x="90.0977%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 1.27%)</title><rect x="91.1168%" y="197" width="1.2690%" height="15" fill="rgb(227,97,0)" fg:x="359" fg:w="5"/><text x="91.3668%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 1.27%)</title><rect x="91.1168%" y="181" width="1.2690%" height="15" fill="rgb(234,150,53)" fg:x="359" fg:w="5"/><text x="91.3668%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 1.02%)</title><rect x="91.3706%" y="165" width="1.0152%" height="15" fill="rgb(228,201,54)" fg:x="360" fg:w="4"/><text x="91.6206%" y="175.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (40 samples, 10.15%)</title><rect x="82.9949%" y="341" width="10.1523%" height="15" fill="rgb(222,22,37)" fg:x="327" fg:w="40"/><text x="83.2449%" y="351.50">core::ops::func..</text></g><g><title>wordle::Wordle::guess::{{closure}} (39 samples, 9.90%)</title><rect x="83.2487%" y="325" width="9.8985%" height="15" fill="rgb(237,53,32)" fg:x="328" fg:w="39"/><text x="83.4987%" y="335.50">wordle::Wordle..</text></g><g><title>wordle::Wordle::check_word (39 samples, 9.90%)</title><rect x="83.2487%" y="309" width="9.8985%" height="15" fill="rgb(233,25,53)" fg:x="328" fg:w="39"/><text x="83.4987%" y="319.50">wordle::Wordle..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (36 samples, 9.14%)</title><rect x="84.0102%" y="293" width="9.1371%" height="15" fill="rgb(210,40,34)" fg:x="331" fg:w="36"/><text x="84.2602%" y="303.50">std::collecti..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (36 samples, 9.14%)</title><rect x="84.0102%" y="277" width="9.1371%" height="15" fill="rgb(241,220,44)" fg:x="331" fg:w="36"/><text x="84.2602%" y="287.50">hashbrown::se..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (36 samples, 9.14%)</title><rect x="84.0102%" y="261" width="9.1371%" height="15" fill="rgb(235,28,35)" fg:x="331" fg:w="36"/><text x="84.2602%" y="271.50">hashbrown::ma..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (36 samples, 9.14%)</title><rect x="84.0102%" y="245" width="9.1371%" height="15" fill="rgb(210,56,17)" fg:x="331" fg:w="36"/><text x="84.2602%" y="255.50">hashbrown::ma..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (13 samples, 3.30%)</title><rect x="89.8477%" y="229" width="3.2995%" height="15" fill="rgb(224,130,29)" fg:x="354" fg:w="13"/><text x="90.0977%" y="239.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (12 samples, 3.05%)</title><rect x="90.1015%" y="213" width="3.0457%" height="15" fill="rgb(235,212,8)" fg:x="355" fg:w="12"/><text x="90.3515%" y="223.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (3 samples, 0.76%)</title><rect x="92.3858%" y="197" width="0.7614%" height="15" fill="rgb(223,33,50)" fg:x="364" fg:w="3"/><text x="92.6358%" y="207.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (3 samples, 0.76%)</title><rect x="92.3858%" y="181" width="0.7614%" height="15" fill="rgb(219,149,13)" fg:x="364" fg:w="3"/><text x="92.6358%" y="191.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (3 samples, 0.76%)</title><rect x="92.3858%" y="165" width="0.7614%" height="15" fill="rgb(250,156,29)" fg:x="364" fg:w="3"/><text x="92.6358%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.76%)</title><rect x="92.3858%" y="149" width="0.7614%" height="15" fill="rgb(216,193,19)" fg:x="364" fg:w="3"/><text x="92.6358%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (3 samples, 0.76%)</title><rect x="92.3858%" y="133" width="0.7614%" height="15" fill="rgb(216,135,14)" fg:x="364" fg:w="3"/><text x="92.6358%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (3 samples, 0.76%)</title><rect x="92.3858%" y="117" width="0.7614%" height="15" fill="rgb(241,47,5)" fg:x="364" fg:w="3"/><text x="92.6358%" y="127.50"></text></g><g><title>core::core_arch::simd::i8x16::new (3 samples, 0.76%)</title><rect x="92.3858%" y="101" width="0.7614%" height="15" fill="rgb(233,42,35)" fg:x="364" fg:w="3"/><text x="92.6358%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (376 samples, 95.43%)</title><rect x="0.2538%" y="501" width="95.4315%" height="15" fill="rgb(231,13,6)" fg:x="1" fg:w="376"/><text x="0.5038%" y="511.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (376 samples, 95.43%)</title><rect x="0.2538%" y="485" width="95.4315%" height="15" fill="rgb(207,181,40)" fg:x="1" fg:w="376"/><text x="0.5038%" y="495.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (376 samples, 95.43%)</title><rect x="0.2538%" y="469" width="95.4315%" height="15" fill="rgb(254,173,49)" fg:x="1" fg:w="376"/><text x="0.5038%" y="479.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (376 samples, 95.43%)</title><rect x="0.2538%" y="453" width="95.4315%" height="15" fill="rgb(221,1,38)" fg:x="1" fg:w="376"/><text x="0.5038%" y="463.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 14.72%)</title><rect x="80.9645%" y="437" width="14.7208%" height="15" fill="rgb(206,124,46)" fg:x="319" fg:w="58"/><text x="81.2145%" y="447.50">&lt;core::iter::adapters:..</text></g><g><title>core::iter::traits::iterator::Iterator::find (58 samples, 14.72%)</title><rect x="80.9645%" y="421" width="14.7208%" height="15" fill="rgb(249,21,11)" fg:x="319" fg:w="58"/><text x="81.2145%" y="431.50">core::iter::traits::it..</text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (58 samples, 14.72%)</title><rect x="80.9645%" y="405" width="14.7208%" height="15" fill="rgb(222,201,40)" fg:x="319" fg:w="58"/><text x="81.2145%" y="415.50">&lt;core::iter::adapters:..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (58 samples, 14.72%)</title><rect x="80.9645%" y="389" width="14.7208%" height="15" fill="rgb(235,61,29)" fg:x="319" fg:w="58"/><text x="81.2145%" y="399.50">core::iter::traits::it..</text></g><g><title>core::iter::adapters::cloned::clone_try_fold::{{closure}} (57 samples, 14.47%)</title><rect x="81.2183%" y="373" width="14.4670%" height="15" fill="rgb(219,207,3)" fg:x="320" fg:w="57"/><text x="81.4683%" y="383.50">core::iter::adapters::..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (50 samples, 12.69%)</title><rect x="82.9949%" y="357" width="12.6904%" height="15" fill="rgb(222,56,46)" fg:x="327" fg:w="50"/><text x="83.2449%" y="367.50">core::iter::traits:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (10 samples, 2.54%)</title><rect x="93.1472%" y="341" width="2.5381%" height="15" fill="rgb(239,76,54)" fg:x="367" fg:w="10"/><text x="93.3972%" y="351.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (10 samples, 2.54%)</title><rect x="93.1472%" y="325" width="2.5381%" height="15" fill="rgb(231,124,27)" fg:x="367" fg:w="10"/><text x="93.3972%" y="335.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (10 samples, 2.54%)</title><rect x="93.1472%" y="309" width="2.5381%" height="15" fill="rgb(249,195,6)" fg:x="367" fg:w="10"/><text x="93.3972%" y="319.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 2.54%)</title><rect x="93.1472%" y="293" width="2.5381%" height="15" fill="rgb(237,174,47)" fg:x="367" fg:w="10"/><text x="93.3972%" y="303.50">&lt;a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10 samples, 2.54%)</title><rect x="93.1472%" y="277" width="2.5381%" height="15" fill="rgb(206,201,31)" fg:x="367" fg:w="10"/><text x="93.3972%" y="287.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (10 samples, 2.54%)</title><rect x="93.1472%" y="261" width="2.5381%" height="15" fill="rgb(231,57,52)" fg:x="367" fg:w="10"/><text x="93.3972%" y="271.50">al..</text></g><g><title>__free (10 samples, 2.54%)</title><rect x="93.1472%" y="245" width="2.5381%" height="15" fill="rgb(248,177,22)" fg:x="367" fg:w="10"/><text x="93.3972%" y="255.50">__..</text></g><g><title>_int_free (7 samples, 1.78%)</title><rect x="93.9086%" y="229" width="1.7766%" height="15" fill="rgb(215,211,37)" fg:x="370" fg:w="7"/><text x="94.1586%" y="239.50">_..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (6 samples, 1.52%)</title><rect x="95.6853%" y="501" width="1.5228%" height="15" fill="rgb(241,128,51)" fg:x="377" fg:w="6"/><text x="95.9353%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 1.52%)</title><rect x="95.6853%" y="485" width="1.5228%" height="15" fill="rgb(227,165,31)" fg:x="377" fg:w="6"/><text x="95.9353%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (6 samples, 1.52%)</title><rect x="95.6853%" y="469" width="1.5228%" height="15" fill="rgb(228,167,24)" fg:x="377" fg:w="6"/><text x="95.9353%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (6 samples, 1.52%)</title><rect x="95.6853%" y="453" width="1.5228%" height="15" fill="rgb(228,143,12)" fg:x="377" fg:w="6"/><text x="95.9353%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (6 samples, 1.52%)</title><rect x="95.6853%" y="437" width="1.5228%" height="15" fill="rgb(249,149,8)" fg:x="377" fg:w="6"/><text x="95.9353%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (6 samples, 1.52%)</title><rect x="95.6853%" y="421" width="1.5228%" height="15" fill="rgb(243,35,44)" fg:x="377" fg:w="6"/><text x="95.9353%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 1.52%)</title><rect x="95.6853%" y="405" width="1.5228%" height="15" fill="rgb(246,89,9)" fg:x="377" fg:w="6"/><text x="95.9353%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 1.52%)</title><rect x="95.6853%" y="389" width="1.5228%" height="15" fill="rgb(233,213,13)" fg:x="377" fg:w="6"/><text x="95.9353%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 1.52%)</title><rect x="95.6853%" y="373" width="1.5228%" height="15" fill="rgb(233,141,41)" fg:x="377" fg:w="6"/><text x="95.9353%" y="383.50"></text></g><g><title>__free (5 samples, 1.27%)</title><rect x="95.9391%" y="357" width="1.2690%" height="15" fill="rgb(239,167,4)" fg:x="378" fg:w="5"/><text x="96.1891%" y="367.50"></text></g><g><title>_int_free (4 samples, 1.02%)</title><rect x="96.1929%" y="341" width="1.0152%" height="15" fill="rgb(209,217,16)" fg:x="379" fg:w="4"/><text x="96.4429%" y="351.50"></text></g><g><title>&lt;wordle::WordleState as core::clone::Clone&gt;::clone (2 samples, 0.51%)</title><rect x="97.2081%" y="485" width="0.5076%" height="15" fill="rgb(219,88,35)" fg:x="383" fg:w="2"/><text x="97.4581%" y="495.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (2 samples, 0.51%)</title><rect x="97.2081%" y="469" width="0.5076%" height="15" fill="rgb(220,193,23)" fg:x="383" fg:w="2"/><text x="97.4581%" y="479.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (2 samples, 0.51%)</title><rect x="97.2081%" y="453" width="0.5076%" height="15" fill="rgb(230,90,52)" fg:x="383" fg:w="2"/><text x="97.4581%" y="463.50"></text></g><g><title>__rdl_realloc (1 samples, 0.25%)</title><rect x="97.7157%" y="261" width="0.2538%" height="15" fill="rgb(252,106,19)" fg:x="385" fg:w="1"/><text x="97.9657%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.25%)</title><rect x="97.7157%" y="245" width="0.2538%" height="15" fill="rgb(206,74,20)" fg:x="385" fg:w="1"/><text x="97.9657%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.51%)</title><rect x="97.7157%" y="485" width="0.5076%" height="15" fill="rgb(230,138,44)" fg:x="385" fg:w="2"/><text x="97.9657%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.51%)</title><rect x="97.7157%" y="469" width="0.5076%" height="15" fill="rgb(235,182,43)" fg:x="385" fg:w="2"/><text x="97.9657%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.51%)</title><rect x="97.7157%" y="453" width="0.5076%" height="15" fill="rgb(242,16,51)" fg:x="385" fg:w="2"/><text x="97.9657%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.51%)</title><rect x="97.7157%" y="437" width="0.5076%" height="15" fill="rgb(248,9,4)" fg:x="385" fg:w="2"/><text x="97.9657%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.51%)</title><rect x="97.7157%" y="421" width="0.5076%" height="15" fill="rgb(210,31,22)" fg:x="385" fg:w="2"/><text x="97.9657%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (2 samples, 0.51%)</title><rect x="97.7157%" y="405" width="0.5076%" height="15" fill="rgb(239,54,39)" fg:x="385" fg:w="2"/><text x="97.9657%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.51%)</title><rect x="97.7157%" y="389" width="0.5076%" height="15" fill="rgb(230,99,41)" fg:x="385" fg:w="2"/><text x="97.9657%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.51%)</title><rect x="97.7157%" y="373" width="0.5076%" height="15" fill="rgb(253,106,12)" fg:x="385" fg:w="2"/><text x="97.9657%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.51%)</title><rect x="97.7157%" y="357" width="0.5076%" height="15" fill="rgb(213,46,41)" fg:x="385" fg:w="2"/><text x="97.9657%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.51%)</title><rect x="97.7157%" y="341" width="0.5076%" height="15" fill="rgb(215,133,35)" fg:x="385" fg:w="2"/><text x="97.9657%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.51%)</title><rect x="97.7157%" y="325" width="0.5076%" height="15" fill="rgb(213,28,5)" fg:x="385" fg:w="2"/><text x="97.9657%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.51%)</title><rect x="97.7157%" y="309" width="0.5076%" height="15" fill="rgb(215,77,49)" fg:x="385" fg:w="2"/><text x="97.9657%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.51%)</title><rect x="97.7157%" y="293" width="0.5076%" height="15" fill="rgb(248,100,22)" fg:x="385" fg:w="2"/><text x="97.9657%" y="303.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.51%)</title><rect x="97.7157%" y="277" width="0.5076%" height="15" fill="rgb(208,67,9)" fg:x="385" fg:w="2"/><text x="97.9657%" y="287.50"></text></g><g><title>__realloc (1 samples, 0.25%)</title><rect x="97.9695%" y="261" width="0.2538%" height="15" fill="rgb(219,133,21)" fg:x="386" fg:w="1"/><text x="98.2195%" y="271.50"></text></g><g><title>__libc_start_main_alias_2 (387 samples, 98.22%)</title><rect x="0.2538%" y="773" width="98.2234%" height="15" fill="rgb(246,46,29)" fg:x="1" fg:w="387"/><text x="0.5038%" y="783.50">__libc_start_main_alias_2</text></g><g><title>__libc_start_call_main (387 samples, 98.22%)</title><rect x="0.2538%" y="757" width="98.2234%" height="15" fill="rgb(246,185,52)" fg:x="1" fg:w="387"/><text x="0.5038%" y="767.50">__libc_start_call_main</text></g><g><title>main (387 samples, 98.22%)</title><rect x="0.2538%" y="741" width="98.2234%" height="15" fill="rgb(252,136,11)" fg:x="1" fg:w="387"/><text x="0.5038%" y="751.50">main</text></g><g><title>std::rt::lang_start_internal (387 samples, 98.22%)</title><rect x="0.2538%" y="725" width="98.2234%" height="15" fill="rgb(219,138,53)" fg:x="1" fg:w="387"/><text x="0.5038%" y="735.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (387 samples, 98.22%)</title><rect x="0.2538%" y="709" width="98.2234%" height="15" fill="rgb(211,51,23)" fg:x="1" fg:w="387"/><text x="0.5038%" y="719.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (387 samples, 98.22%)</title><rect x="0.2538%" y="693" width="98.2234%" height="15" fill="rgb(247,221,28)" fg:x="1" fg:w="387"/><text x="0.5038%" y="703.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (387 samples, 98.22%)</title><rect x="0.2538%" y="677" width="98.2234%" height="15" fill="rgb(251,222,45)" fg:x="1" fg:w="387"/><text x="0.5038%" y="687.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (387 samples, 98.22%)</title><rect x="0.2538%" y="661" width="98.2234%" height="15" fill="rgb(217,162,53)" fg:x="1" fg:w="387"/><text x="0.5038%" y="671.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (387 samples, 98.22%)</title><rect x="0.2538%" y="645" width="98.2234%" height="15" fill="rgb(229,93,14)" fg:x="1" fg:w="387"/><text x="0.5038%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (387 samples, 98.22%)</title><rect x="0.2538%" y="629" width="98.2234%" height="15" fill="rgb(209,67,49)" fg:x="1" fg:w="387"/><text x="0.5038%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (387 samples, 98.22%)</title><rect x="0.2538%" y="613" width="98.2234%" height="15" fill="rgb(213,87,29)" fg:x="1" fg:w="387"/><text x="0.5038%" y="623.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (387 samples, 98.22%)</title><rect x="0.2538%" y="597" width="98.2234%" height="15" fill="rgb(205,151,52)" fg:x="1" fg:w="387"/><text x="0.5038%" y="607.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (387 samples, 98.22%)</title><rect x="0.2538%" y="581" width="98.2234%" height="15" fill="rgb(253,215,39)" fg:x="1" fg:w="387"/><text x="0.5038%" y="591.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (387 samples, 98.22%)</title><rect x="0.2538%" y="565" width="98.2234%" height="15" fill="rgb(221,220,41)" fg:x="1" fg:w="387"/><text x="0.5038%" y="575.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (387 samples, 98.22%)</title><rect x="0.2538%" y="549" width="98.2234%" height="15" fill="rgb(218,133,21)" fg:x="1" fg:w="387"/><text x="0.5038%" y="559.50">core::ops::function::FnOnce::call_once</text></g><g><title>wordle::main (387 samples, 98.22%)</title><rect x="0.2538%" y="533" width="98.2234%" height="15" fill="rgb(221,193,43)" fg:x="1" fg:w="387"/><text x="0.5038%" y="543.50">wordle::main</text></g><g><title>wordle::Wordle::guess (387 samples, 98.22%)</title><rect x="0.2538%" y="517" width="98.2234%" height="15" fill="rgb(240,128,52)" fg:x="1" fg:w="387"/><text x="0.5038%" y="527.50">wordle::Wordle::guess</text></g><g><title>wordle::Wordle::evaluate (5 samples, 1.27%)</title><rect x="97.2081%" y="501" width="1.2690%" height="15" fill="rgb(253,114,12)" fg:x="383" fg:w="5"/><text x="97.4581%" y="511.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (1 samples, 0.25%)</title><rect x="98.2234%" y="485" width="0.2538%" height="15" fill="rgb(215,223,47)" fg:x="387" fg:w="1"/><text x="98.4734%" y="495.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1 samples, 0.25%)</title><rect x="98.2234%" y="469" width="0.2538%" height="15" fill="rgb(248,225,23)" fg:x="387" fg:w="1"/><text x="98.4734%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.25%)</title><rect x="98.2234%" y="453" width="0.2538%" height="15" fill="rgb(250,108,0)" fg:x="387" fg:w="1"/><text x="98.4734%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.25%)</title><rect x="98.2234%" y="437" width="0.2538%" height="15" fill="rgb(228,208,7)" fg:x="387" fg:w="1"/><text x="98.4734%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.25%)</title><rect x="98.2234%" y="421" width="0.2538%" height="15" fill="rgb(244,45,10)" fg:x="387" fg:w="1"/><text x="98.4734%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="98.4772%" y="757" width="0.2538%" height="15" fill="rgb(207,125,25)" fg:x="388" fg:w="1"/><text x="98.7272%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="98.4772%" y="741" width="0.2538%" height="15" fill="rgb(210,195,18)" fg:x="388" fg:w="1"/><text x="98.7272%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="98.4772%" y="725" width="0.2538%" height="15" fill="rgb(249,80,12)" fg:x="388" fg:w="1"/><text x="98.7272%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="98.4772%" y="709" width="0.2538%" height="15" fill="rgb(221,65,9)" fg:x="388" fg:w="1"/><text x="98.7272%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="98.4772%" y="693" width="0.2538%" height="15" fill="rgb(235,49,36)" fg:x="388" fg:w="1"/><text x="98.7272%" y="703.50"></text></g><g><title>__GI___tunables_init (1 samples, 0.25%)</title><rect x="98.7310%" y="725" width="0.2538%" height="15" fill="rgb(225,32,20)" fg:x="389" fg:w="1"/><text x="98.9810%" y="735.50"></text></g><g><title>_dl_start_final (2 samples, 0.51%)</title><rect x="98.7310%" y="757" width="0.5076%" height="15" fill="rgb(215,141,46)" fg:x="389" fg:w="2"/><text x="98.9810%" y="767.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.51%)</title><rect x="98.7310%" y="741" width="0.5076%" height="15" fill="rgb(250,160,47)" fg:x="389" fg:w="2"/><text x="98.9810%" y="751.50"></text></g><g><title>dl_main (1 samples, 0.25%)</title><rect x="98.9848%" y="725" width="0.2538%" height="15" fill="rgb(216,222,40)" fg:x="390" fg:w="1"/><text x="99.2348%" y="735.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.25%)</title><rect x="98.9848%" y="709" width="0.2538%" height="15" fill="rgb(234,217,39)" fg:x="390" fg:w="1"/><text x="99.2348%" y="719.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.25%)</title><rect x="98.9848%" y="693" width="0.2538%" height="15" fill="rgb(207,178,40)" fg:x="390" fg:w="1"/><text x="99.2348%" y="703.50"></text></g><g><title>elf_machine_rela_relative (1 samples, 0.25%)</title><rect x="98.9848%" y="677" width="0.2538%" height="15" fill="rgb(221,136,13)" fg:x="390" fg:w="1"/><text x="99.2348%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="98.9848%" y="661" width="0.2538%" height="15" fill="rgb(249,199,10)" fg:x="390" fg:w="1"/><text x="99.2348%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="98.9848%" y="645" width="0.2538%" height="15" fill="rgb(249,222,13)" fg:x="390" fg:w="1"/><text x="99.2348%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="98.9848%" y="629" width="0.2538%" height="15" fill="rgb(244,185,38)" fg:x="390" fg:w="1"/><text x="99.2348%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="98.9848%" y="613" width="0.2538%" height="15" fill="rgb(236,202,9)" fg:x="390" fg:w="1"/><text x="99.2348%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="98.9848%" y="597" width="0.2538%" height="15" fill="rgb(250,229,37)" fg:x="390" fg:w="1"/><text x="99.2348%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="98.9848%" y="581" width="0.2538%" height="15" fill="rgb(206,174,23)" fg:x="390" fg:w="1"/><text x="99.2348%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="98.9848%" y="565" width="0.2538%" height="15" fill="rgb(211,33,43)" fg:x="390" fg:w="1"/><text x="99.2348%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="98.9848%" y="549" width="0.2538%" height="15" fill="rgb(245,58,50)" fg:x="390" fg:w="1"/><text x="99.2348%" y="559.50"></text></g><g><title>elf_get_dynamic_info (2 samples, 0.51%)</title><rect x="99.2386%" y="757" width="0.5076%" height="15" fill="rgb(244,68,36)" fg:x="391" fg:w="2"/><text x="99.4886%" y="767.50"></text></g><g><title>[unknown] (2 samples, 0.51%)</title><rect x="99.2386%" y="741" width="0.5076%" height="15" fill="rgb(232,229,15)" fg:x="391" fg:w="2"/><text x="99.4886%" y="751.50"></text></g><g><title>[unknown] (2 samples, 0.51%)</title><rect x="99.2386%" y="725" width="0.5076%" height="15" fill="rgb(254,30,23)" fg:x="391" fg:w="2"/><text x="99.4886%" y="735.50"></text></g><g><title>[unknown] (2 samples, 0.51%)</title><rect x="99.2386%" y="709" width="0.5076%" height="15" fill="rgb(235,160,14)" fg:x="391" fg:w="2"/><text x="99.4886%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.51%)</title><rect x="99.2386%" y="693" width="0.5076%" height="15" fill="rgb(212,155,44)" fg:x="391" fg:w="2"/><text x="99.4886%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.51%)</title><rect x="99.2386%" y="677" width="0.5076%" height="15" fill="rgb(226,2,50)" fg:x="391" fg:w="2"/><text x="99.4886%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.51%)</title><rect x="99.2386%" y="661" width="0.5076%" height="15" fill="rgb(234,177,6)" fg:x="391" fg:w="2"/><text x="99.4886%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.51%)</title><rect x="99.2386%" y="645" width="0.5076%" height="15" fill="rgb(217,24,9)" fg:x="391" fg:w="2"/><text x="99.4886%" y="655.50"></text></g><g><title>all (394 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(220,13,46)" fg:x="0" fg:w="394"/><text x="0.2500%" y="831.50"></text></g><g><title>wordle (394 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(239,221,27)" fg:x="0" fg:w="394"/><text x="0.2500%" y="815.50">wordle</text></g><g><title>_start (394 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(222,198,25)" fg:x="0" fg:w="394"/><text x="0.2500%" y="799.50">_start</text></g><g><title>_dl_start (6 samples, 1.52%)</title><rect x="98.4772%" y="773" width="1.5228%" height="15" fill="rgb(211,99,13)" fg:x="388" fg:w="6"/><text x="98.7272%" y="783.50"></text></g><g><title>rtld_timer_start (1 samples, 0.25%)</title><rect x="99.7462%" y="757" width="0.2538%" height="15" fill="rgb(232,111,31)" fg:x="393" fg:w="1"/><text x="99.9962%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="99.7462%" y="741" width="0.2538%" height="15" fill="rgb(245,82,37)" fg:x="393" fg:w="1"/><text x="99.9962%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="99.7462%" y="725" width="0.2538%" height="15" fill="rgb(227,149,46)" fg:x="393" fg:w="1"/><text x="99.9962%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="99.7462%" y="709" width="0.2538%" height="15" fill="rgb(218,36,50)" fg:x="393" fg:w="1"/><text x="99.9962%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="99.7462%" y="693" width="0.2538%" height="15" fill="rgb(226,80,48)" fg:x="393" fg:w="1"/><text x="99.9962%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="99.7462%" y="677" width="0.2538%" height="15" fill="rgb(238,224,15)" fg:x="393" fg:w="1"/><text x="99.9962%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="99.7462%" y="661" width="0.2538%" height="15" fill="rgb(241,136,10)" fg:x="393" fg:w="1"/><text x="99.9962%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="99.7462%" y="645" width="0.2538%" height="15" fill="rgb(208,32,45)" fg:x="393" fg:w="1"/><text x="99.9962%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="99.7462%" y="629" width="0.2538%" height="15" fill="rgb(207,135,9)" fg:x="393" fg:w="1"/><text x="99.9962%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.25%)</title><rect x="99.7462%" y="613" width="0.2538%" height="15" fill="rgb(206,86,44)" fg:x="393" fg:w="1"/><text x="99.9962%" y="623.50"></text></g></svg></svg>