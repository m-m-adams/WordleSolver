<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="773.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="773.00"> </text><svg id="frames" x="10" width="1180" total_samples="2392"><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="693" width="0.0418%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="677" width="0.0418%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="661" width="0.0418%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="645" width="0.0418%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="629" width="0.0418%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="613" width="0.0418%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="597" width="0.0418%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="581" width="0.0418%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="565" width="0.0418%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.25%)</title><rect x="0.0418%" y="309" width="0.2508%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="6"/><text x="0.2918%" y="319.50"></text></g><g><title>&lt;&amp;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (4 samples, 0.17%)</title><rect x="7.0234%" y="229" width="0.1672%" height="15" fill="rgb(250,228,42)" fg:x="168" fg:w="4"/><text x="7.2734%" y="239.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (4 samples, 0.17%)</title><rect x="7.0234%" y="213" width="0.1672%" height="15" fill="rgb(240,193,28)" fg:x="168" fg:w="4"/><text x="7.2734%" y="223.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (4 samples, 0.17%)</title><rect x="7.0234%" y="197" width="0.1672%" height="15" fill="rgb(216,20,37)" fg:x="168" fg:w="4"/><text x="7.2734%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (4 samples, 0.17%)</title><rect x="7.0234%" y="181" width="0.1672%" height="15" fill="rgb(206,188,39)" fg:x="168" fg:w="4"/><text x="7.2734%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (4 samples, 0.17%)</title><rect x="7.0234%" y="165" width="0.1672%" height="15" fill="rgb(217,207,13)" fg:x="168" fg:w="4"/><text x="7.2734%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (4 samples, 0.17%)</title><rect x="7.0234%" y="149" width="0.1672%" height="15" fill="rgb(231,73,38)" fg:x="168" fg:w="4"/><text x="7.2734%" y="159.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (2 samples, 0.08%)</title><rect x="7.1070%" y="133" width="0.0836%" height="15" fill="rgb(225,20,46)" fg:x="170" fg:w="2"/><text x="7.3570%" y="143.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (2 samples, 0.08%)</title><rect x="7.1070%" y="117" width="0.0836%" height="15" fill="rgb(210,31,41)" fg:x="170" fg:w="2"/><text x="7.3570%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (2 samples, 0.08%)</title><rect x="7.1070%" y="101" width="0.0836%" height="15" fill="rgb(221,200,47)" fg:x="170" fg:w="2"/><text x="7.3570%" y="111.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (12 samples, 0.50%)</title><rect x="7.7759%" y="133" width="0.5017%" height="15" fill="rgb(226,26,5)" fg:x="186" fg:w="12"/><text x="8.0259%" y="143.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 1.34%)</title><rect x="7.1906%" y="229" width="1.3378%" height="15" fill="rgb(249,33,26)" fg:x="172" fg:w="32"/><text x="7.4406%" y="239.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 1.34%)</title><rect x="7.1906%" y="213" width="1.3378%" height="15" fill="rgb(235,183,28)" fg:x="172" fg:w="32"/><text x="7.4406%" y="223.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 1.34%)</title><rect x="7.1906%" y="197" width="1.3378%" height="15" fill="rgb(221,5,38)" fg:x="172" fg:w="32"/><text x="7.4406%" y="207.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 1.34%)</title><rect x="7.1906%" y="181" width="1.3378%" height="15" fill="rgb(247,18,42)" fg:x="172" fg:w="32"/><text x="7.4406%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 1.21%)</title><rect x="7.3161%" y="165" width="1.2124%" height="15" fill="rgb(241,131,45)" fg:x="175" fg:w="29"/><text x="7.5661%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 1.17%)</title><rect x="7.3579%" y="149" width="1.1706%" height="15" fill="rgb(249,31,29)" fg:x="176" fg:w="28"/><text x="7.6079%" y="159.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (6 samples, 0.25%)</title><rect x="8.2776%" y="133" width="0.2508%" height="15" fill="rgb(225,111,53)" fg:x="198" fg:w="6"/><text x="8.5276%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="9.7408%" y="165" width="0.0418%" height="15" fill="rgb(238,160,17)" fg:x="233" fg:w="1"/><text x="9.9908%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (67 samples, 2.80%)</title><rect x="8.5284%" y="229" width="2.8010%" height="15" fill="rgb(214,148,48)" fg:x="204" fg:w="67"/><text x="8.7784%" y="239.50">co..</text></g><g><title>&lt;u8 as core::slice::cmp::SliceContains&gt;::slice_contains (67 samples, 2.80%)</title><rect x="8.5284%" y="213" width="2.8010%" height="15" fill="rgb(232,36,49)" fg:x="204" fg:w="67"/><text x="8.7784%" y="223.50">&lt;u..</text></g><g><title>core::slice::memchr::memchr (67 samples, 2.80%)</title><rect x="8.5284%" y="197" width="2.8010%" height="15" fill="rgb(209,103,24)" fg:x="204" fg:w="67"/><text x="8.7784%" y="207.50">co..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (67 samples, 2.80%)</title><rect x="8.5284%" y="181" width="2.8010%" height="15" fill="rgb(229,88,8)" fg:x="204" fg:w="67"/><text x="8.7784%" y="191.50">&lt;c..</text></g><g><title>core::slice::memchr::memchr::{{closure}} (37 samples, 1.55%)</title><rect x="9.7826%" y="165" width="1.5468%" height="15" fill="rgb(213,181,19)" fg:x="234" fg:w="37"/><text x="10.0326%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (79 samples, 3.30%)</title><rect x="17.7258%" y="85" width="3.3027%" height="15" fill="rgb(254,191,54)" fg:x="424" fg:w="79"/><text x="17.9758%" y="95.50">cor..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (162 samples, 6.77%)</title><rect x="16.8060%" y="101" width="6.7726%" height="15" fill="rgb(241,83,37)" fg:x="402" fg:w="162"/><text x="17.0560%" y="111.50">&lt;core::ha..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (61 samples, 2.55%)</title><rect x="21.0284%" y="85" width="2.5502%" height="15" fill="rgb(233,36,39)" fg:x="503" fg:w="61"/><text x="21.2784%" y="95.50">co..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (156 samples, 6.52%)</title><rect x="30.5184%" y="85" width="6.5217%" height="15" fill="rgb(226,3,54)" fg:x="730" fg:w="156"/><text x="30.7684%" y="95.50">core::num..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (438 samples, 18.31%)</title><rect x="23.5786%" y="101" width="18.3110%" height="15" fill="rgb(245,192,40)" fg:x="564" fg:w="438"/><text x="23.8286%" y="111.50">&lt;core::hash::sip::Sip13Rounds..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (116 samples, 4.85%)</title><rect x="37.0401%" y="85" width="4.8495%" height="15" fill="rgb(238,167,29)" fg:x="886" fg:w="116"/><text x="37.2901%" y="95.50">core::..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (652 samples, 27.26%)</title><rect x="14.6739%" y="149" width="27.2575%" height="15" fill="rgb(232,182,51)" fg:x="351" fg:w="652"/><text x="14.9239%" y="159.50">&lt;std::collections::hash::map::DefaultHasher ..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (652 samples, 27.26%)</title><rect x="14.6739%" y="133" width="27.2575%" height="15" fill="rgb(231,60,39)" fg:x="351" fg:w="652"/><text x="14.9239%" y="143.50">&lt;core::hash::sip::SipHasher13 as core::hash:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (652 samples, 27.26%)</title><rect x="14.6739%" y="117" width="27.2575%" height="15" fill="rgb(208,69,12)" fg:x="351" fg:w="652"/><text x="14.9239%" y="127.50">&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::H..</text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="41.8896%" y="101" width="0.0418%" height="15" fill="rgb(235,93,37)" fg:x="1002" fg:w="1"/><text x="42.1396%" y="111.50"></text></g><g><title>hashbrown::map::make_hash (748 samples, 31.27%)</title><rect x="13.5033%" y="165" width="31.2709%" height="15" fill="rgb(213,116,39)" fg:x="323" fg:w="748"/><text x="13.7533%" y="175.50">hashbrown::map::make_hash</text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (68 samples, 2.84%)</title><rect x="41.9314%" y="149" width="2.8428%" height="15" fill="rgb(222,207,29)" fg:x="1003" fg:w="68"/><text x="42.1814%" y="159.50">&lt;s..</text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (68 samples, 2.84%)</title><rect x="41.9314%" y="133" width="2.8428%" height="15" fill="rgb(206,96,30)" fg:x="1003" fg:w="68"/><text x="42.1814%" y="143.50">co..</text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (68 samples, 2.84%)</title><rect x="41.9314%" y="117" width="2.8428%" height="15" fill="rgb(218,138,4)" fg:x="1003" fg:w="68"/><text x="42.1814%" y="127.50">co..</text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (68 samples, 2.84%)</title><rect x="41.9314%" y="101" width="2.8428%" height="15" fill="rgb(250,191,14)" fg:x="1003" fg:w="68"/><text x="42.1814%" y="111.50">co..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (17 samples, 0.71%)</title><rect x="44.7742%" y="149" width="0.7107%" height="15" fill="rgb(239,60,40)" fg:x="1071" fg:w="17"/><text x="45.0242%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (442 samples, 18.48%)</title><rect x="55.9783%" y="117" width="18.4783%" height="15" fill="rgb(206,27,48)" fg:x="1339" fg:w="442"/><text x="56.2283%" y="127.50">&lt;hashbrown::raw::RawIterHashI..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (419 samples, 17.52%)</title><rect x="56.9398%" y="101" width="17.5167%" height="15" fill="rgb(225,35,8)" fg:x="1362" fg:w="419"/><text x="57.1898%" y="111.50">&lt;hashbrown::raw::bitmask::B..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (58 samples, 2.42%)</title><rect x="72.0318%" y="85" width="2.4247%" height="15" fill="rgb(250,213,24)" fg:x="1723" fg:w="58"/><text x="72.2818%" y="95.50">ha..</text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (456 samples, 19.06%)</title><rect x="55.9783%" y="133" width="19.0635%" height="15" fill="rgb(247,123,22)" fg:x="1339" fg:w="456"/><text x="56.2283%" y="143.50">&lt;hashbrown::raw::RawIterHash&lt;T..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (14 samples, 0.59%)</title><rect x="74.4565%" y="117" width="0.5853%" height="15" fill="rgb(231,138,38)" fg:x="1781" fg:w="14"/><text x="74.7065%" y="127.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (30 samples, 1.25%)</title><rect x="75.0418%" y="133" width="1.2542%" height="15" fill="rgb(231,145,46)" fg:x="1795" fg:w="30"/><text x="75.2918%" y="143.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (30 samples, 1.25%)</title><rect x="75.0418%" y="117" width="1.2542%" height="15" fill="rgb(251,118,11)" fg:x="1795" fg:w="30"/><text x="75.2918%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (30 samples, 1.25%)</title><rect x="75.0418%" y="101" width="1.2542%" height="15" fill="rgb(217,147,25)" fg:x="1795" fg:w="30"/><text x="75.2918%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (30 samples, 1.25%)</title><rect x="75.0418%" y="85" width="1.2542%" height="15" fill="rgb(247,81,37)" fg:x="1795" fg:w="30"/><text x="75.2918%" y="95.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (62 samples, 2.59%)</title><rect x="76.5050%" y="85" width="2.5920%" height="15" fill="rgb(209,12,38)" fg:x="1830" fg:w="62"/><text x="76.7550%" y="95.50">ha..</text></g><g><title>hashbrown::raw::h2 (56 samples, 2.34%)</title><rect x="79.0970%" y="85" width="2.3411%" height="15" fill="rgb(227,1,9)" fg:x="1892" fg:w="56"/><text x="79.3470%" y="95.50">h..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::{{closure}} (2,331 samples, 97.45%)</title><rect x="0.2926%" y="277" width="97.4498%" height="15" fill="rgb(248,47,43)" fg:x="7" fg:w="2331"/><text x="0.5426%" y="287.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::{{closure}}</text></g><g><title>wordle::Wordle::guess::{{closure}} (2,330 samples, 97.41%)</title><rect x="0.3344%" y="261" width="97.4080%" height="15" fill="rgb(221,10,30)" fg:x="8" fg:w="2330"/><text x="0.5844%" y="271.50">wordle::Wordle::guess::{{closure}}</text></g><g><title>wordle::Wordle::check_word (2,300 samples, 96.15%)</title><rect x="1.5886%" y="245" width="96.1538%" height="15" fill="rgb(210,229,1)" fg:x="38" fg:w="2300"/><text x="1.8386%" y="255.50">wordle::Wordle::check_word</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (2,067 samples, 86.41%)</title><rect x="11.3294%" y="229" width="86.4130%" height="15" fill="rgb(222,148,37)" fg:x="271" fg:w="2067"/><text x="11.5794%" y="239.50">std::collections::hash::set::HashSet&lt;T,S&gt;::contains</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (2,067 samples, 86.41%)</title><rect x="11.3294%" y="213" width="86.4130%" height="15" fill="rgb(234,67,33)" fg:x="271" fg:w="2067"/><text x="11.5794%" y="223.50">hashbrown::set::HashSet&lt;T,S,A&gt;::contains</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2,063 samples, 86.25%)</title><rect x="11.4967%" y="197" width="86.2458%" height="15" fill="rgb(247,98,35)" fg:x="275" fg:w="2063"/><text x="11.7467%" y="207.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,015 samples, 84.24%)</title><rect x="13.5033%" y="181" width="84.2391%" height="15" fill="rgb(247,138,52)" fg:x="323" fg:w="2015"/><text x="13.7533%" y="191.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,267 samples, 52.97%)</title><rect x="44.7742%" y="165" width="52.9682%" height="15" fill="rgb(213,79,30)" fg:x="1071" fg:w="1267"/><text x="45.0242%" y="175.50">hashbrown::raw::RawTable&lt;T,A&gt;::get</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,250 samples, 52.26%)</title><rect x="45.4849%" y="149" width="52.2575%" height="15" fill="rgb(246,177,23)" fg:x="1088" fg:w="1250"/><text x="45.7349%" y="159.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (513 samples, 21.45%)</title><rect x="76.2960%" y="133" width="21.4465%" height="15" fill="rgb(230,62,27)" fg:x="1825" fg:w="513"/><text x="76.5460%" y="143.50">hashbrown::raw::RawTable&lt;T,A&gt;::ite..</text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (513 samples, 21.45%)</title><rect x="76.2960%" y="117" width="21.4465%" height="15" fill="rgb(216,154,8)" fg:x="1825" fg:w="513"/><text x="76.5460%" y="127.50">hashbrown::raw::RawIterHash&lt;T,A&gt;::..</text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (513 samples, 21.45%)</title><rect x="76.2960%" y="101" width="21.4465%" height="15" fill="rgb(244,35,45)" fg:x="1825" fg:w="513"/><text x="76.5460%" y="111.50">hashbrown::raw::RawIterHashInner&lt;A..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (390 samples, 16.30%)</title><rect x="81.4381%" y="85" width="16.3043%" height="15" fill="rgb(251,115,12)" fg:x="1948" fg:w="390"/><text x="81.6881%" y="95.50">hashbrown::raw::sse2::Gro..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (390 samples, 16.30%)</title><rect x="81.4381%" y="69" width="16.3043%" height="15" fill="rgb(240,54,50)" fg:x="1948" fg:w="390"/><text x="81.6881%" y="79.50">core::core_arch::x86::sse..</text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (390 samples, 16.30%)</title><rect x="81.4381%" y="53" width="16.3043%" height="15" fill="rgb(233,84,52)" fg:x="1948" fg:w="390"/><text x="81.6881%" y="63.50">core::core_arch::x86::sse..</text></g><g><title>core::core_arch::simd::i8x16::new (390 samples, 16.30%)</title><rect x="81.4381%" y="37" width="16.3043%" height="15" fill="rgb(207,117,47)" fg:x="1948" fg:w="390"/><text x="81.6881%" y="47.50">core::core_arch::simd::i8..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2,345 samples, 98.04%)</title><rect x="0.2926%" y="293" width="98.0351%" height="15" fill="rgb(249,43,39)" fg:x="7" fg:w="2345"/><text x="0.5426%" y="303.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (14 samples, 0.59%)</title><rect x="97.7425%" y="277" width="0.5853%" height="15" fill="rgb(209,38,44)" fg:x="2338" fg:w="14"/><text x="97.9925%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (2,352 samples, 98.33%)</title><rect x="0.0418%" y="421" width="98.3278%" height="15" fill="rgb(236,212,23)" fg:x="1" fg:w="2352"/><text x="0.2918%" y="431.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count</text></g><g><title>core::iter::traits::iterator::Iterator::sum (2,352 samples, 98.33%)</title><rect x="0.0418%" y="405" width="98.3278%" height="15" fill="rgb(242,79,21)" fg:x="1" fg:w="2352"/><text x="0.2918%" y="415.50">core::iter::traits::iterator::Iterator::sum</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (2,352 samples, 98.33%)</title><rect x="0.0418%" y="389" width="98.3278%" height="15" fill="rgb(211,96,35)" fg:x="1" fg:w="2352"/><text x="0.2918%" y="399.50">&lt;usize as core::iter::traits::accum::Sum&gt;::sum</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,352 samples, 98.33%)</title><rect x="0.0418%" y="373" width="98.3278%" height="15" fill="rgb(253,215,40)" fg:x="1" fg:w="2352"/><text x="0.2918%" y="383.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,352 samples, 98.33%)</title><rect x="0.0418%" y="357" width="98.3278%" height="15" fill="rgb(211,81,21)" fg:x="1" fg:w="2352"/><text x="0.2918%" y="367.50">&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,352 samples, 98.33%)</title><rect x="0.0418%" y="341" width="98.3278%" height="15" fill="rgb(208,190,38)" fg:x="1" fg:w="2352"/><text x="0.2918%" y="351.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (2,352 samples, 98.33%)</title><rect x="0.0418%" y="325" width="98.3278%" height="15" fill="rgb(235,213,38)" fg:x="1" fg:w="2352"/><text x="0.2918%" y="335.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2,346 samples, 98.08%)</title><rect x="0.2926%" y="309" width="98.0769%" height="15" fill="rgb(237,122,38)" fg:x="7" fg:w="2346"/><text x="0.5426%" y="319.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.04%)</title><rect x="98.3278%" y="293" width="0.0418%" height="15" fill="rgb(244,218,35)" fg:x="2352" fg:w="1"/><text x="98.5778%" y="303.50"></text></g><g><title>core::array::&lt;impl core::clone::Clone for [T: N]&gt;::clone (1 samples, 0.04%)</title><rect x="98.3278%" y="277" width="0.0418%" height="15" fill="rgb(240,68,47)" fg:x="2352" fg:w="1"/><text x="98.5778%" y="287.50"></text></g><g><title>&lt;T as core::array::SpecArrayClone&gt;::clone (1 samples, 0.04%)</title><rect x="98.3278%" y="261" width="0.0418%" height="15" fill="rgb(210,16,53)" fg:x="2352" fg:w="1"/><text x="98.5778%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="98.3696%" y="421" width="0.0418%" height="15" fill="rgb(235,124,12)" fg:x="2353" fg:w="1"/><text x="98.6196%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;wordle::WordleState&gt; (3 samples, 0.13%)</title><rect x="98.4114%" y="421" width="0.1254%" height="15" fill="rgb(224,169,11)" fg:x="2354" fg:w="3"/><text x="98.6614%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;u8&gt;&gt; (3 samples, 0.13%)</title><rect x="98.4114%" y="405" width="0.1254%" height="15" fill="rgb(250,166,2)" fg:x="2354" fg:w="3"/><text x="98.6614%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;u8,std::collections::hash::map::RandomState&gt;&gt; (3 samples, 0.13%)</title><rect x="98.4114%" y="389" width="0.1254%" height="15" fill="rgb(242,216,29)" fg:x="2354" fg:w="3"/><text x="98.6614%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u8,(),std::collections::hash::map::RandomState&gt;&gt; (3 samples, 0.13%)</title><rect x="98.4114%" y="373" width="0.1254%" height="15" fill="rgb(230,116,27)" fg:x="2354" fg:w="3"/><text x="98.6614%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u8,())&gt;&gt; (3 samples, 0.13%)</title><rect x="98.4114%" y="357" width="0.1254%" height="15" fill="rgb(228,99,48)" fg:x="2354" fg:w="3"/><text x="98.6614%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.13%)</title><rect x="98.4114%" y="341" width="0.1254%" height="15" fill="rgb(253,11,6)" fg:x="2354" fg:w="3"/><text x="98.6614%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_empty_singleton (3 samples, 0.13%)</title><rect x="98.4114%" y="325" width="0.1254%" height="15" fill="rgb(247,143,39)" fg:x="2354" fg:w="3"/><text x="98.6614%" y="335.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::log2 (1 samples, 0.04%)</title><rect x="98.5368%" y="421" width="0.0418%" height="15" fill="rgb(236,97,10)" fg:x="2357" fg:w="1"/><text x="98.7868%" y="431.50"></text></g><g><title>[libm.so.6] (1 samples, 0.04%)</title><rect x="98.5368%" y="405" width="0.0418%" height="15" fill="rgb(233,208,19)" fg:x="2357" fg:w="1"/><text x="98.7868%" y="415.50"></text></g><g><title>&lt;wordle::WordleState as core::clone::Clone&gt;::clone (4 samples, 0.17%)</title><rect x="98.5786%" y="405" width="0.1672%" height="15" fill="rgb(216,164,2)" fg:x="2358" fg:w="4"/><text x="98.8286%" y="415.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (4 samples, 0.17%)</title><rect x="98.5786%" y="389" width="0.1672%" height="15" fill="rgb(220,129,5)" fg:x="2358" fg:w="4"/><text x="98.8286%" y="399.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (4 samples, 0.17%)</title><rect x="98.5786%" y="373" width="0.1672%" height="15" fill="rgb(242,17,10)" fg:x="2358" fg:w="4"/><text x="98.8286%" y="383.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="98.7040%" y="357" width="0.0418%" height="15" fill="rgb(242,107,0)" fg:x="2361" fg:w="1"/><text x="98.9540%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="98.7040%" y="341" width="0.0418%" height="15" fill="rgb(251,28,31)" fg:x="2361" fg:w="1"/><text x="98.9540%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_in (1 samples, 0.04%)</title><rect x="98.7040%" y="325" width="0.0418%" height="15" fill="rgb(233,223,10)" fg:x="2361" fg:w="1"/><text x="98.9540%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_in (1 samples, 0.04%)</title><rect x="98.7040%" y="309" width="0.0418%" height="15" fill="rgb(215,21,27)" fg:x="2361" fg:w="1"/><text x="98.9540%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::static_empty (1 samples, 0.04%)</title><rect x="98.7040%" y="293" width="0.0418%" height="15" fill="rgb(232,23,21)" fg:x="2361" fg:w="1"/><text x="98.9540%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.08%)</title><rect x="98.7458%" y="341" width="0.0836%" height="15" fill="rgb(244,5,23)" fg:x="2362" fg:w="2"/><text x="98.9958%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.08%)</title><rect x="98.7458%" y="325" width="0.0836%" height="15" fill="rgb(226,81,46)" fg:x="2362" fg:w="2"/><text x="98.9958%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.08%)</title><rect x="98.7458%" y="309" width="0.0836%" height="15" fill="rgb(247,70,30)" fg:x="2362" fg:w="2"/><text x="98.9958%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.08%)</title><rect x="98.7458%" y="293" width="0.0836%" height="15" fill="rgb(212,68,19)" fg:x="2362" fg:w="2"/><text x="98.9958%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.04%)</title><rect x="98.7876%" y="277" width="0.0418%" height="15" fill="rgb(240,187,13)" fg:x="2363" fg:w="1"/><text x="99.0376%" y="287.50"></text></g><g><title>hashbrown::map::make_insert_hash (3 samples, 0.13%)</title><rect x="98.7458%" y="357" width="0.1254%" height="15" fill="rgb(223,113,26)" fg:x="2362" fg:w="3"/><text x="98.9958%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.04%)</title><rect x="98.8294%" y="341" width="0.0418%" height="15" fill="rgb(206,192,2)" fg:x="2364" fg:w="1"/><text x="99.0794%" y="351.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.04%)</title><rect x="98.8294%" y="325" width="0.0418%" height="15" fill="rgb(241,108,4)" fg:x="2364" fg:w="1"/><text x="99.0794%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.04%)</title><rect x="98.8294%" y="309" width="0.0418%" height="15" fill="rgb(247,173,49)" fg:x="2364" fg:w="1"/><text x="99.0794%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.04%)</title><rect x="98.8294%" y="293" width="0.0418%" height="15" fill="rgb(224,114,35)" fg:x="2364" fg:w="1"/><text x="99.0794%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1 samples, 0.04%)</title><rect x="98.8712%" y="277" width="0.0418%" height="15" fill="rgb(245,159,27)" fg:x="2365" fg:w="1"/><text x="99.1212%" y="287.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.04%)</title><rect x="98.9130%" y="277" width="0.0418%" height="15" fill="rgb(245,172,44)" fg:x="2366" fg:w="1"/><text x="99.1630%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3 samples, 0.13%)</title><rect x="98.8712%" y="357" width="0.1254%" height="15" fill="rgb(236,23,11)" fg:x="2365" fg:w="3"/><text x="99.1212%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.13%)</title><rect x="98.8712%" y="341" width="0.1254%" height="15" fill="rgb(205,117,38)" fg:x="2365" fg:w="3"/><text x="99.1212%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (3 samples, 0.13%)</title><rect x="98.8712%" y="325" width="0.1254%" height="15" fill="rgb(237,72,25)" fg:x="2365" fg:w="3"/><text x="99.1212%" y="335.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (3 samples, 0.13%)</title><rect x="98.8712%" y="309" width="0.1254%" height="15" fill="rgb(244,70,9)" fg:x="2365" fg:w="3"/><text x="99.1212%" y="319.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (3 samples, 0.13%)</title><rect x="98.8712%" y="293" width="0.1254%" height="15" fill="rgb(217,125,39)" fg:x="2365" fg:w="3"/><text x="99.1212%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="98.9548%" y="277" width="0.0418%" height="15" fill="rgb(235,36,10)" fg:x="2367" fg:w="1"/><text x="99.2048%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.04%)</title><rect x="98.9548%" y="261" width="0.0418%" height="15" fill="rgb(251,123,47)" fg:x="2367" fg:w="1"/><text x="99.2048%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.04%)</title><rect x="98.9548%" y="245" width="0.0418%" height="15" fill="rgb(221,13,13)" fg:x="2367" fg:w="1"/><text x="99.2048%" y="255.50"></text></g><g><title>core::core_arch::simd::i8x16::new (1 samples, 0.04%)</title><rect x="98.9548%" y="229" width="0.0418%" height="15" fill="rgb(238,131,9)" fg:x="2367" fg:w="1"/><text x="99.2048%" y="239.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (1 samples, 0.04%)</title><rect x="98.9967%" y="293" width="0.0418%" height="15" fill="rgb(211,50,8)" fg:x="2368" fg:w="1"/><text x="99.2467%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.04%)</title><rect x="98.9967%" y="277" width="0.0418%" height="15" fill="rgb(245,182,24)" fg:x="2368" fg:w="1"/><text x="99.2467%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="98.9967%" y="261" width="0.0418%" height="15" fill="rgb(242,14,37)" fg:x="2368" fg:w="1"/><text x="99.2467%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="98.9967%" y="245" width="0.0418%" height="15" fill="rgb(246,228,12)" fg:x="2368" fg:w="1"/><text x="99.2467%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="98.9967%" y="229" width="0.0418%" height="15" fill="rgb(213,55,15)" fg:x="2368" fg:w="1"/><text x="99.2467%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (2 samples, 0.08%)</title><rect x="99.0385%" y="293" width="0.0836%" height="15" fill="rgb(209,9,3)" fg:x="2369" fg:w="2"/><text x="99.2885%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (2 samples, 0.08%)</title><rect x="99.0385%" y="277" width="0.0836%" height="15" fill="rgb(230,59,30)" fg:x="2369" fg:w="2"/><text x="99.2885%" y="287.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (3 samples, 0.13%)</title><rect x="99.1221%" y="245" width="0.1254%" height="15" fill="rgb(209,121,21)" fg:x="2371" fg:w="3"/><text x="99.3721%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.13%)</title><rect x="99.1221%" y="229" width="0.1254%" height="15" fill="rgb(220,109,13)" fg:x="2371" fg:w="3"/><text x="99.3721%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.13%)</title><rect x="99.1221%" y="213" width="0.1254%" height="15" fill="rgb(232,18,1)" fg:x="2371" fg:w="3"/><text x="99.3721%" y="223.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.13%)</title><rect x="99.1221%" y="197" width="0.1254%" height="15" fill="rgb(215,41,42)" fg:x="2371" fg:w="3"/><text x="99.3721%" y="207.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.13%)</title><rect x="99.1221%" y="181" width="0.1254%" height="15" fill="rgb(224,123,36)" fg:x="2371" fg:w="3"/><text x="99.3721%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (7 samples, 0.29%)</title><rect x="98.9967%" y="341" width="0.2926%" height="15" fill="rgb(240,125,3)" fg:x="2368" fg:w="7"/><text x="99.2467%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.29%)</title><rect x="98.9967%" y="325" width="0.2926%" height="15" fill="rgb(205,98,50)" fg:x="2368" fg:w="7"/><text x="99.2467%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::resize (7 samples, 0.29%)</title><rect x="98.9967%" y="309" width="0.2926%" height="15" fill="rgb(205,185,37)" fg:x="2368" fg:w="7"/><text x="99.2467%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (4 samples, 0.17%)</title><rect x="99.1221%" y="293" width="0.1672%" height="15" fill="rgb(238,207,15)" fg:x="2371" fg:w="4"/><text x="99.3721%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (4 samples, 0.17%)</title><rect x="99.1221%" y="277" width="0.1672%" height="15" fill="rgb(213,199,42)" fg:x="2371" fg:w="4"/><text x="99.3721%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (4 samples, 0.17%)</title><rect x="99.1221%" y="261" width="0.1672%" height="15" fill="rgb(235,201,11)" fg:x="2371" fg:w="4"/><text x="99.3721%" y="271.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.04%)</title><rect x="99.2475%" y="245" width="0.0418%" height="15" fill="rgb(207,46,11)" fg:x="2374" fg:w="1"/><text x="99.4975%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1 samples, 0.04%)</title><rect x="99.4565%" y="325" width="0.0418%" height="15" fill="rgb(241,35,35)" fg:x="2379" fg:w="1"/><text x="99.7065%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="99.4983%" y="325" width="0.0418%" height="15" fill="rgb(243,32,47)" fg:x="2380" fg:w="1"/><text x="99.7483%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.04%)</title><rect x="99.5401%" y="325" width="0.0418%" height="15" fill="rgb(247,202,23)" fg:x="2381" fg:w="1"/><text x="99.7901%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.04%)</title><rect x="99.5401%" y="309" width="0.0418%" height="15" fill="rgb(219,102,11)" fg:x="2381" fg:w="1"/><text x="99.7901%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="99.5401%" y="293" width="0.0418%" height="15" fill="rgb(243,110,44)" fg:x="2381" fg:w="1"/><text x="99.7901%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (10 samples, 0.42%)</title><rect x="99.2893%" y="341" width="0.4181%" height="15" fill="rgb(222,74,54)" fg:x="2375" fg:w="10"/><text x="99.5393%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (3 samples, 0.13%)</title><rect x="99.5819%" y="325" width="0.1254%" height="15" fill="rgb(216,99,12)" fg:x="2382" fg:w="3"/><text x="99.8319%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.13%)</title><rect x="99.5819%" y="309" width="0.1254%" height="15" fill="rgb(226,22,26)" fg:x="2382" fg:w="3"/><text x="99.8319%" y="319.50"></text></g><g><title>__libc_start_main_alias_2 (2,385 samples, 99.71%)</title><rect x="0.0418%" y="693" width="99.7074%" height="15" fill="rgb(217,163,10)" fg:x="1" fg:w="2385"/><text x="0.2918%" y="703.50">__libc_start_main_alias_2</text></g><g><title>__libc_start_call_main (2,385 samples, 99.71%)</title><rect x="0.0418%" y="677" width="99.7074%" height="15" fill="rgb(213,25,53)" fg:x="1" fg:w="2385"/><text x="0.2918%" y="687.50">__libc_start_call_main</text></g><g><title>main (2,385 samples, 99.71%)</title><rect x="0.0418%" y="661" width="99.7074%" height="15" fill="rgb(252,105,26)" fg:x="1" fg:w="2385"/><text x="0.2918%" y="671.50">main</text></g><g><title>std::rt::lang_start_internal (2,385 samples, 99.71%)</title><rect x="0.0418%" y="645" width="99.7074%" height="15" fill="rgb(220,39,43)" fg:x="1" fg:w="2385"/><text x="0.2918%" y="655.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (2,385 samples, 99.71%)</title><rect x="0.0418%" y="629" width="99.7074%" height="15" fill="rgb(229,68,48)" fg:x="1" fg:w="2385"/><text x="0.2918%" y="639.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,385 samples, 99.71%)</title><rect x="0.0418%" y="613" width="99.7074%" height="15" fill="rgb(252,8,32)" fg:x="1" fg:w="2385"/><text x="0.2918%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,385 samples, 99.71%)</title><rect x="0.0418%" y="597" width="99.7074%" height="15" fill="rgb(223,20,43)" fg:x="1" fg:w="2385"/><text x="0.2918%" y="607.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (2,385 samples, 99.71%)</title><rect x="0.0418%" y="581" width="99.7074%" height="15" fill="rgb(229,81,49)" fg:x="1" fg:w="2385"/><text x="0.2918%" y="591.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (2,385 samples, 99.71%)</title><rect x="0.0418%" y="565" width="99.7074%" height="15" fill="rgb(236,28,36)" fg:x="1" fg:w="2385"/><text x="0.2918%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,385 samples, 99.71%)</title><rect x="0.0418%" y="549" width="99.7074%" height="15" fill="rgb(249,185,26)" fg:x="1" fg:w="2385"/><text x="0.2918%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,385 samples, 99.71%)</title><rect x="0.0418%" y="533" width="99.7074%" height="15" fill="rgb(249,174,33)" fg:x="1" fg:w="2385"/><text x="0.2918%" y="543.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,385 samples, 99.71%)</title><rect x="0.0418%" y="517" width="99.7074%" height="15" fill="rgb(233,201,37)" fg:x="1" fg:w="2385"/><text x="0.2918%" y="527.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (2,385 samples, 99.71%)</title><rect x="0.0418%" y="501" width="99.7074%" height="15" fill="rgb(221,78,26)" fg:x="1" fg:w="2385"/><text x="0.2918%" y="511.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,385 samples, 99.71%)</title><rect x="0.0418%" y="485" width="99.7074%" height="15" fill="rgb(250,127,30)" fg:x="1" fg:w="2385"/><text x="0.2918%" y="495.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,385 samples, 99.71%)</title><rect x="0.0418%" y="469" width="99.7074%" height="15" fill="rgb(230,49,44)" fg:x="1" fg:w="2385"/><text x="0.2918%" y="479.50">core::ops::function::FnOnce::call_once</text></g><g><title>wordle::main (2,385 samples, 99.71%)</title><rect x="0.0418%" y="453" width="99.7074%" height="15" fill="rgb(229,67,23)" fg:x="1" fg:w="2385"/><text x="0.2918%" y="463.50">wordle::main</text></g><g><title>wordle::Wordle::guess (2,385 samples, 99.71%)</title><rect x="0.0418%" y="437" width="99.7074%" height="15" fill="rgb(249,83,47)" fg:x="1" fg:w="2385"/><text x="0.2918%" y="447.50">wordle::Wordle::guess</text></g><g><title>wordle::Wordle::evaluate (28 samples, 1.17%)</title><rect x="98.5786%" y="421" width="1.1706%" height="15" fill="rgb(215,43,3)" fg:x="2358" fg:w="28"/><text x="98.8286%" y="431.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (24 samples, 1.00%)</title><rect x="98.7458%" y="405" width="1.0033%" height="15" fill="rgb(238,154,13)" fg:x="2362" fg:w="24"/><text x="98.9958%" y="415.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (24 samples, 1.00%)</title><rect x="98.7458%" y="389" width="1.0033%" height="15" fill="rgb(219,56,2)" fg:x="2362" fg:w="24"/><text x="98.9958%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (24 samples, 1.00%)</title><rect x="98.7458%" y="373" width="1.0033%" height="15" fill="rgb(233,0,4)" fg:x="2362" fg:w="24"/><text x="98.9958%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (18 samples, 0.75%)</title><rect x="98.9967%" y="357" width="0.7525%" height="15" fill="rgb(235,30,7)" fg:x="2368" fg:w="18"/><text x="99.2467%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (1 samples, 0.04%)</title><rect x="99.7074%" y="341" width="0.0418%" height="15" fill="rgb(250,79,13)" fg:x="2385" fg:w="1"/><text x="99.9574%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.7492%" y="677" width="0.0418%" height="15" fill="rgb(211,146,34)" fg:x="2386" fg:w="1"/><text x="99.9992%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.7492%" y="661" width="0.0418%" height="15" fill="rgb(228,22,38)" fg:x="2386" fg:w="1"/><text x="99.9992%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.7492%" y="645" width="0.0418%" height="15" fill="rgb(235,168,5)" fg:x="2386" fg:w="1"/><text x="99.9992%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.7492%" y="629" width="0.0418%" height="15" fill="rgb(221,155,16)" fg:x="2386" fg:w="1"/><text x="99.9992%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.7492%" y="613" width="0.0418%" height="15" fill="rgb(215,215,53)" fg:x="2386" fg:w="1"/><text x="99.9992%" y="623.50"></text></g><g><title>__GI___tunables_init (1 samples, 0.04%)</title><rect x="99.7910%" y="645" width="0.0418%" height="15" fill="rgb(223,4,10)" fg:x="2387" fg:w="1"/><text x="100.0410%" y="655.50"></text></g><g><title>_dl_start_final (2 samples, 0.08%)</title><rect x="99.7910%" y="677" width="0.0836%" height="15" fill="rgb(234,103,6)" fg:x="2387" fg:w="2"/><text x="100.0410%" y="687.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.08%)</title><rect x="99.7910%" y="661" width="0.0836%" height="15" fill="rgb(227,97,0)" fg:x="2387" fg:w="2"/><text x="100.0410%" y="671.50"></text></g><g><title>dl_main (1 samples, 0.04%)</title><rect x="99.8328%" y="645" width="0.0418%" height="15" fill="rgb(234,150,53)" fg:x="2388" fg:w="1"/><text x="100.0828%" y="655.50"></text></g><g><title>_dl_receive_error (1 samples, 0.04%)</title><rect x="99.8328%" y="629" width="0.0418%" height="15" fill="rgb(228,201,54)" fg:x="2388" fg:w="1"/><text x="100.0828%" y="639.50"></text></g><g><title>version_check_doit (1 samples, 0.04%)</title><rect x="99.8328%" y="613" width="0.0418%" height="15" fill="rgb(222,22,37)" fg:x="2388" fg:w="1"/><text x="100.0828%" y="623.50"></text></g><g><title>_dl_check_all_versions (1 samples, 0.04%)</title><rect x="99.8328%" y="597" width="0.0418%" height="15" fill="rgb(237,53,32)" fg:x="2388" fg:w="1"/><text x="100.0828%" y="607.50"></text></g><g><title>_dl_check_map_versions (1 samples, 0.04%)</title><rect x="99.8328%" y="581" width="0.0418%" height="15" fill="rgb(233,25,53)" fg:x="2388" fg:w="1"/><text x="100.0828%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.8328%" y="565" width="0.0418%" height="15" fill="rgb(210,40,34)" fg:x="2388" fg:w="1"/><text x="100.0828%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.8328%" y="549" width="0.0418%" height="15" fill="rgb(241,220,44)" fg:x="2388" fg:w="1"/><text x="100.0828%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.8328%" y="533" width="0.0418%" height="15" fill="rgb(235,28,35)" fg:x="2388" fg:w="1"/><text x="100.0828%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.8328%" y="517" width="0.0418%" height="15" fill="rgb(210,56,17)" fg:x="2388" fg:w="1"/><text x="100.0828%" y="527.50"></text></g><g><title>elf_get_dynamic_info (2 samples, 0.08%)</title><rect x="99.8746%" y="677" width="0.0836%" height="15" fill="rgb(224,130,29)" fg:x="2389" fg:w="2"/><text x="100.1246%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.08%)</title><rect x="99.8746%" y="661" width="0.0836%" height="15" fill="rgb(235,212,8)" fg:x="2389" fg:w="2"/><text x="100.1246%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.08%)</title><rect x="99.8746%" y="645" width="0.0836%" height="15" fill="rgb(223,33,50)" fg:x="2389" fg:w="2"/><text x="100.1246%" y="655.50"></text></g><g><title>[unknown] (2 samples, 0.08%)</title><rect x="99.8746%" y="629" width="0.0836%" height="15" fill="rgb(219,149,13)" fg:x="2389" fg:w="2"/><text x="100.1246%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.08%)</title><rect x="99.8746%" y="613" width="0.0836%" height="15" fill="rgb(250,156,29)" fg:x="2389" fg:w="2"/><text x="100.1246%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.08%)</title><rect x="99.8746%" y="597" width="0.0836%" height="15" fill="rgb(216,193,19)" fg:x="2389" fg:w="2"/><text x="100.1246%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.9164%" y="581" width="0.0418%" height="15" fill="rgb(216,135,14)" fg:x="2390" fg:w="1"/><text x="100.1664%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.9164%" y="565" width="0.0418%" height="15" fill="rgb(241,47,5)" fg:x="2390" fg:w="1"/><text x="100.1664%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.9164%" y="549" width="0.0418%" height="15" fill="rgb(233,42,35)" fg:x="2390" fg:w="1"/><text x="100.1664%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.9164%" y="533" width="0.0418%" height="15" fill="rgb(231,13,6)" fg:x="2390" fg:w="1"/><text x="100.1664%" y="543.50"></text></g><g><title>all (2,392 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(207,181,40)" fg:x="0" fg:w="2392"/><text x="0.2500%" y="751.50"></text></g><g><title>wordle (2,392 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(254,173,49)" fg:x="0" fg:w="2392"/><text x="0.2500%" y="735.50">wordle</text></g><g><title>_start (2,392 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(221,1,38)" fg:x="0" fg:w="2392"/><text x="0.2500%" y="719.50">_start</text></g><g><title>_dl_start (6 samples, 0.25%)</title><rect x="99.7492%" y="693" width="0.2508%" height="15" fill="rgb(206,124,46)" fg:x="2386" fg:w="6"/><text x="99.9992%" y="703.50"></text></g><g><title>rtld_timer_start (1 samples, 0.04%)</title><rect x="99.9582%" y="677" width="0.0418%" height="15" fill="rgb(249,21,11)" fg:x="2391" fg:w="1"/><text x="100.2082%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.9582%" y="661" width="0.0418%" height="15" fill="rgb(222,201,40)" fg:x="2391" fg:w="1"/><text x="100.2082%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.9582%" y="645" width="0.0418%" height="15" fill="rgb(235,61,29)" fg:x="2391" fg:w="1"/><text x="100.2082%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.9582%" y="629" width="0.0418%" height="15" fill="rgb(219,207,3)" fg:x="2391" fg:w="1"/><text x="100.2082%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.9582%" y="613" width="0.0418%" height="15" fill="rgb(222,56,46)" fg:x="2391" fg:w="1"/><text x="100.2082%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.9582%" y="597" width="0.0418%" height="15" fill="rgb(239,76,54)" fg:x="2391" fg:w="1"/><text x="100.2082%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.9582%" y="581" width="0.0418%" height="15" fill="rgb(231,124,27)" fg:x="2391" fg:w="1"/><text x="100.2082%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.9582%" y="565" width="0.0418%" height="15" fill="rgb(249,195,6)" fg:x="2391" fg:w="1"/><text x="100.2082%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.9582%" y="549" width="0.0418%" height="15" fill="rgb(237,174,47)" fg:x="2391" fg:w="1"/><text x="100.2082%" y="559.50"></text></g></svg></svg>